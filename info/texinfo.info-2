This is ../info/texinfo.info, produced by makeinfo version 4.8 from
texinfo.texi.

INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. Updating info/dir entries.
* texi2dvi: (texinfo)Format with texi2dvi.      Printing Texinfo documentation.
* texindex: (texinfo)Format with tex/texindex.  Sorting Texinfo index files.
* makeinfo: (texinfo)makeinfo Preferred.        Translate Texinfo source.
END-INFO-DIR-ENTRY

  This file documents Texinfo, a documentation system that can produce
both on-line information and a printed manual from a single source file.

  Copyright (C) 1988, 90, 91, 92, 93, 95, 96, 97, 98 Free Software
Foundation, Inc.

  This edition is for Texinfo version 3.12.

  Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

  Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

  Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: texinfo.info,  Node: Def Cmd Template,  Next: Optional Arguments,  Prev: Definition Commands,  Up: Definition Commands

15.1 The Template for a Definition
==================================

The `@deffn' command is used for definitions of entities that resemble
functions.  To write a definition using the `@deffn' command, write the
`@deffn' command at the beginning of a line and follow it on the same
line by the category of the entity, the name of the entity itself, and
its arguments (if any).  Then write the body of the definition on
succeeding lines.  (You may embed examples in the body.)  Finally, end
the definition with an `@end deffn' command written on a line of its
own.  (The other definition commands follow the same format.)

  The template for a definition looks like this:

     @deffn CATEGORY NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end deffn

For example,

     @deffn Command forward-word count
     This command moves point forward @var{count} words
     (or backward if @var{count} is negative). ...
     @end deffn

produces

      -- Command: forward-word count
          This function moves point forward COUNT words (or backward if
          COUNT is negative). ...

  Capitalize the category name like a title.  If the name of the
category contains spaces, as in the phrase `Interactive Command', write
braces around it.  For example:

     @deffn {Interactive Command} isearch-forward
     ...
     @end deffn

Otherwise, the second word will be mistaken for the name of the entity.

  Some of the definition commands are more general than others.  The
`@deffn' command, for example, is the general definition command for
functions and the like--for entities that may take arguments.  When you
use this command, you specify the category to which the entity belongs.
The `@deffn' command possesses three predefined, specialized
variations, `@defun', `@defmac', and `@defspec', that specify the
category for you: "Function", "Macro", and "Special Form" respectively.
(In Lisp, a special form is an entity much like a function.)  The
`@defvr' command also is accompanied by several predefined, specialized
variations for describing particular kinds of variables.

  The template for a specialized definition, such as `@defun', is
similar to the template for a generalized definition, except that you
do not need to specify the category:

     @defun NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end defun

Thus,

     @defun buffer-end flag
     This function returns @code{(point-min)} if @var{flag}
     is less than 1, @code{(point-max)} otherwise.
     ...
     @end defun

produces

      -- Function: buffer-end flag
          This function returns `(point-min)' if FLAG is less than 1,
          `(point-max)' otherwise.  ...

*Note Sample Function Definition: Sample Function Definition, for a
more detailed example of a function definition, including the use of
`@example' inside the definition.

  The other specialized commands work like `@defun'.


File: texinfo.info,  Node: Optional Arguments,  Next: deffnx,  Prev: Def Cmd Template,  Up: Definition Commands

15.2 Optional and Repeated Arguments
====================================

Some entities take optional or repeated arguments, which may be
specified by a distinctive glyph that uses square brackets and
ellipses.  For example, a special form often breaks its argument list
into separate arguments in more complicated ways than a straightforward
function.

  An argument enclosed within square brackets is optional.  Thus,
[OPTIONAL-ARG] means that OPTIONAL-ARG is optional.  An argument
followed by an ellipsis is optional and may be repeated more than once.
Thus, REPEATED-ARGS... stands for zero or more arguments.  Parentheses
are used when several arguments are grouped into additional levels of
list structure in Lisp.

  Here is the `@defspec' line of an example of an imaginary special
form:

      -- Special Form: foobar (VAR [FROM TO [INC]]) BODY...

In this example, the arguments FROM and TO are optional, but must both
be present or both absent.  If they are present, INC may optionally be
specified as well.  These arguments are grouped with the argument VAR
into a list, to distinguish them from BODY, which includes all
remaining elements of the form.

  In a Texinfo source file, this `@defspec' line is written like this
(except it would not be split over two lines, as it is in this example).

     @defspec foobar (@var{var} [@var{from} @var{to}
          [@var{inc}]]) @var{body}@dots{}

The function is listed in the Command and Variable Index under `foobar'.


File: texinfo.info,  Node: deffnx,  Next: Def Cmds in Detail,  Prev: Optional Arguments,  Up: Definition Commands

15.3 Two or More `First' Lines
==============================

To create two or more `first' or header lines for a definition, follow
the first `@deffn' line by a line beginning with `@deffnx'.  The
`@deffnx' command works exactly like `@deffn' except that it does not
generate extra vertical white space between it and the preceding line.

  For example,

     @deffn {Interactive Command} isearch-forward
     @deffnx {Interactive Command} isearch-backward
     These two search commands are similar except ...
     @end deffn

produces

 -- Interactive Command: isearch-forward
 -- Interactive Command: isearch-backward
     These two search commands are similar except ...

  Each of the other definition commands has an `x' form: `@defunx',
`@defvrx', `@deftypefunx', etc.

  The `x' forms work just like `@itemx'; see *Note `@itemx': itemx.


File: texinfo.info,  Node: Def Cmds in Detail,  Next: Def Cmd Conventions,  Prev: deffnx,  Up: Definition Commands

15.4 The Definition Commands
============================

Texinfo provides more than a dozen definition commands, all of which
are described in this section.

  The definition commands automatically enter the name of the entity in
the appropriate index: for example, `@deffn', `@defun', and `@defmac'
enter function names in the index of functions; `@defvr' and `@defvar'
enter variable names in the index of variables.

  Although the examples that follow mostly illustrate Lisp, the commands
can be used for other programming languages.

* Menu:

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.


File: texinfo.info,  Node: Functions Commands,  Next: Variables Commands,  Prev: Def Cmds in Detail,  Up: Def Cmds in Detail

15.4.1 Functions and Similar Entities
-------------------------------------

This section describes the commands for describing functions and similar
entities:

`@deffn CATEGORY NAME ARGUMENTS...'
     The `@deffn' command is the general definition command for
     functions, interactive commands, and similar entities that may take
     arguments.  You must choose a term to describe the category of
     entity being defined; for example, "Function" could be used if the
     entity is a function.  The `@deffn' command is written at the
     beginning of a line and is followed on the same line by the
     category of entity being described, the name of this particular
     entity, and its arguments, if any.  Terminate the definition with
     `@end deffn' on a line of its own.

     For example, here is a definition:

          @deffn Command forward-char nchars
          Move point forward @var{nchars} characters.
          @end deffn

     This shows a rather terse definition for a "command" named
     `forward-char' with one argument, NCHARS.

     `@deffn' prints argument names such as NCHARS in italics or upper
     case, as if `@var' had been used, because we think of these names
     as metasyntactic variables--they stand for the actual argument
     values.  Within the text of the description, write an argument name
     explicitly with `@var' to refer to the value of the argument.  In
     the example above, we used `@var{nchars}' in this way.

     The template for `@deffn' is:

          @deffn CATEGORY NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end deffn

`@defun NAME ARGUMENTS...'
     The `@defun' command is the definition command for functions.
     `@defun' is equivalent to `@deffn Function ...'.

     For example,

          @defun set symbol new-value
          Change the value of the symbol @var{symbol}
          to @var{new-value}.
          @end defun

     shows a rather terse definition for a function `set' whose
     arguments are SYMBOL and NEW-VALUE.  The argument names on the
     `@defun' line automatically appear in italics or upper case as if
     they were enclosed in `@var'.  Terminate the definition with `@end
     defun' on a line of its own.

     The template is:

          @defun FUNCTION-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defun

     `@defun' creates an entry in the index of functions.

`@defmac NAME ARGUMENTS...'
     The `@defmac' command is the definition command for macros.
     `@defmac' is equivalent to `@deffn Macro ...' and works like
     `@defun'.

`@defspec NAME ARGUMENTS...'
     The `@defspec' command is the definition command for special
     forms.  (In Lisp, a special form is an entity much like a function,
     *note Special Forms: (lispref)Special Forms.)  `@defspec' is
     equivalent to `@deffn {Special Form} ...' and works like `@defun'.


File: texinfo.info,  Node: Variables Commands,  Next: Typed Functions,  Prev: Functions Commands,  Up: Def Cmds in Detail

15.4.2 Variables and Similar Entities
-------------------------------------

Here are the commands for defining variables and similar entities:

`@defvr CATEGORY NAME'
     The `@defvr' command is a general definition command for something
     like a variable--an entity that records a value.  You must choose
     a term to describe the category of entity being defined; for
     example, "Variable" could be used if the entity is a variable.
     Write the `@defvr' command at the beginning of a line and followed
     it on the same line by the category of the entity and the name of
     the entity.

     Capitalize the category name like a title.  If the name of the
     category contains spaces, as in the name "User Option", enclose it
     in braces.  Otherwise, the second word will be mistaken for the
     name of the entity.  For example,

          @defvr {User Option} fill-column
          This buffer-local variable specifies
          the maximum width of filled lines.
          ...
          @end defvr

     Terminate the definition with `@end defvr' on a line of its own.

     The template is:

          @defvr CATEGORY NAME
          BODY-OF-DEFINITION
          @end defvr

     `@defvr' creates an entry in the index of variables for NAME.

`@defvar NAME'
     The `@defvar' command is the definition command for variables.
     `@defvar' is equivalent to `@defvr Variable ...'.

     For example:

          @defvar kill-ring
          ...
          @end defvar

     The template is:

          @defvar NAME
          BODY-OF-DEFINITION
          @end defvar

     `@defvar' creates an entry in the index of variables for NAME.

`@defopt NAME'
     The `@defopt' command is the definition command for "user
     options", i.e., variables intended for users to change according to
     taste; Emacs has many such (*note Variables: (xemacs)Variables.).
     `@defopt' is equivalent to `@defvr {User Option} ...' and works
     like `@defvar'.


File: texinfo.info,  Node: Typed Functions,  Next: Typed Variables,  Prev: Variables Commands,  Up: Def Cmds in Detail

15.4.3 Functions in Typed Languages
-----------------------------------

The `@deftypefn' command and its variations are for describing
functions in languages in which you must declare types of variables and
functions, such as C and C++.

`@deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS...'
     The `@deftypefn' command is the general definition command for
     functions and similar entities that may take arguments and that are
     typed.  The `@deftypefn' command is written at the beginning of a
     line and is followed on the same line by the category of entity
     being described, the type of the returned value, the name of this
     particular entity, and its arguments, if any.

     For example,

          @deftypefn {Library Function} int foobar
             (int @var{foo}, float @var{bar})
          ...
          @end deftypefn

     (where the text before the "...", shown above as two lines, would
     actually be a single line in a real Texinfo file) produces the
     following in Info:

          -- Library Function: int foobar (int FOO, float BAR)
          ...

     This means that `foobar' is a "library function" that returns an
     `int', and its arguments are FOO (an `int') and BAR (a `float').

     The argument names that you write in `@deftypefn' are not subject
     to an implicit `@var'--since the actual names of the arguments in
     `@deftypefn' are typically scattered among data type names and
     keywords, Texinfo cannot find them without help.  Instead, you
     must write `@var' explicitly around the argument names.  In the
     example above, the argument names are `foo' and `bar'.

     The template for `@deftypefn' is:

          @deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS ...
          BODY-OF-DESCRIPTION
          @end deftypefn

     Note that if the CATEGORY or DATA TYPE is more than one word then
     it must be enclosed in braces to make it a single argument.

     If you are describing a procedure in a language that has packages,
     such as Ada, you might consider using `@deftypefn' in a manner
     somewhat contrary to the convention described in the preceding
     paragraphs.

     For example:

          @deftypefn stacks private push
                  (@var{s}:in out stack;
                  @var{n}:in integer)
          ...
          @end deftypefn

     (The `@deftypefn' arguments are shown split into three lines, but
     would be a single line in a real Texinfo file.)

     In this instance, the procedure is classified as belonging to the
     package `stacks' rather than classified as a `procedure' and its
     data type is described as `private'.  (The name of the procedure
     is `push', and its arguments are S and N.)

     `@deftypefn' creates an entry in the index of functions for NAME.

`@deftypefun DATA-TYPE NAME ARGUMENTS...'
     The `@deftypefun' command is the specialized definition command
     for functions in typed languages.  The command is equivalent to
     `@deftypefn Function ...'.

     Thus,

          @deftypefun int foobar (int @var{foo}, float @var{bar})
          ...
          @end deftypefun

     produces the following in Info:

          -- Function: int foobar (int FOO, float BAR)
          ...

     The template is:

          @deftypefun TYPE NAME ARGUMENTS...
          BODY-OF-DESCRIPTION
          @end deftypefun

     `@deftypefun' creates an entry in the index of functions for NAME.



File: texinfo.info,  Node: Typed Variables,  Next: Abstract Objects,  Prev: Typed Functions,  Up: Def Cmds in Detail

15.4.4 Variables in Typed Languages
-----------------------------------

Variables in typed languages are handled in a manner similar to
functions in typed languages.  *Note Typed Functions::.  The general
definition command `@deftypevr' corresponds to `@deftypefn' and the
specialized definition command `@deftypevar' corresponds to
`@deftypefun'.

`@deftypevr CATEGORY DATA-TYPE NAME'
     The `@deftypevr' command is the general definition command for
     something like a variable in a typed language--an entity that
     records a value.  You must choose a term to describe the category
     of the entity being defined; for example, "Variable" could be used
     if the entity is a variable.

     The `@deftypevr' command is written at the beginning of a line and
     is followed on the same line by the category of the entity being
     described, the data type, and the name of this particular entity.

     For example:

          @deftypevr {Global Flag} int enable
          ...
          @end deftypevr

     produces the following in Info:

          -- Global Flag: int enable
          ...

     The template is:

          @deftypevr CATEGORY DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevr

     `@deftypevr' creates an entry in the index of variables for NAME.

`@deftypevar DATA-TYPE NAME'
     The `@deftypevar' command is the specialized definition command
     for variables in typed languages.  `@deftypevar' is equivalent to
     `@deftypevr Variable ...'.

     For example:

          @deftypevar int fubar
          ...
          @end deftypevar

     produces the following in Info:

          -- Variable: int fubar
          ...

     The template is:

          @deftypevar DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevar

     `@deftypevar' creates an entry in the index of variables for NAME.


File: texinfo.info,  Node: Abstract Objects,  Next: Data Types,  Prev: Typed Variables,  Up: Def Cmds in Detail

15.4.5 Object-Oriented Programming
----------------------------------

Here are the commands for formatting descriptions about abstract
objects, such as are used in object-oriented programming.  A class is a
defined type of abstract object.  An instance of a class is a
particular object that has the type of the class.  An instance variable
is a variable that belongs to the class but for which each instance has
its own value.

  In a definition, if the name of a class is truly a name defined in the
programming system for a class, then you should write an `@code' around
it.  Otherwise, it is printed in the usual text font.

`@defcv CATEGORY CLASS NAME'
     The `@defcv' command is the general definition command for
     variables associated with classes in object-oriented programming.
     The `@defcv' command is followed by three arguments: the category
     of thing being defined, the class to which it belongs, and its
     name.  Thus,

          @defcv {Class Option} Window border-pattern
          ...
          @end defcv

     illustrates how you would write the first line of a definition of
     the `border-pattern' class option of the class `Window'.

     The template is

          @defcv CATEGORY CLASS NAME
          ...
          @end defcv

     `@defcv' creates an entry in the index of variables.

`@defivar CLASS NAME'
     The `@defivar' command is the definition command for instance
     variables in object-oriented programming.  `@defivar' is
     equivalent to `@defcv {Instance Variable} ...'

     The template is:

          @defivar CLASS INSTANCE-VARIABLE-NAME
          BODY-OF-DEFINITION
          @end defivar

     `@defivar' creates an entry in the index of variables.

`@defop CATEGORY CLASS NAME ARGUMENTS...'
     The `@defop' command is the general definition command for
     entities that may resemble methods in object-oriented programming.
     These entities take arguments, as functions do, but are associated
     with particular classes of objects.

     For example, some systems have constructs called "wrappers" that
     are associated with classes as methods are, but that act more like
     macros than like functions.  You could use `@defop Wrapper' to
     describe one of these.

     Sometimes it is useful to distinguish methods and "operations".
     You can think of an operation as the specification for a method.
     Thus, a window system might specify that all window classes have a
     method named `expose'; we would say that this window system
     defines an `expose' operation on windows in general.  Typically,
     the operation has a name and also specifies the pattern of
     arguments; all methods that implement the operation must accept
     the same arguments, since applications that use the operation do
     so without knowing which method will implement it.

     Often it makes more sense to document operations than methods.  For
     example, window application developers need to know about the
     `expose' operation, but need not be concerned with whether a given
     class of windows has its own method to implement this operation.
     To describe this operation, you would write:

          @defop Operation windows expose

     The `@defop' command is written at the beginning of a line and is
     followed on the same line by the overall name of the category of
     operation, the name of the class of the operation, the name of the
     operation, and its arguments, if any.

     The template is:

          @defop CATEGORY CLASS NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defop

     `@defop' creates an entry, such as ``expose' on `windows'', in the
     index of functions.

`@defmethod CLASS NAME ARGUMENTS...'
     The `@defmethod' command is the definition command for methods in
     object-oriented programming.  A method is a kind of function that
     implements an operation for a particular class of objects and its
     subclasses.  In the Lisp Machine, methods actually were functions,
     but they were usually defined with `defmethod'.

     `@defmethod' is equivalent to `@defop Method ...'.  The command is
     written at the beginning of a line and is followed by the name of
     the class of the method, the name of the method, and its
     arguments, if any.

     For example,

          @defmethod `bar-class' bar-method argument
          ...
          @end defmethod

     illustrates the definition for a method called `bar-method' of the
     class `bar-class'.  The method takes an argument.

     The template is:

          @defmethod CLASS METHOD-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defmethod

     `@defmethod' creates an entry, such as ``bar-method' on
     `bar-class'', in the index of functions.

`@deftypemethod CLASS DATA-TYPE NAME ARGUMENTS...'
     The `@deftypemethod' command is the definition command for methods
     in object-oriented typed languages, such as C++ and Java.  It is
     similar to the `@defmethod' command with the addition of the
     DATA-TYPE parameter to specify the return type of the method.



File: texinfo.info,  Node: Data Types,  Prev: Abstract Objects,  Up: Def Cmds in Detail

15.4.6 Data Types
-----------------

Here is the command for data types:

`@deftp CATEGORY NAME ATTRIBUTES...'
     The `@deftp' command is the generic definition command for data
     types.  The command is written at the beginning of a line and is
     followed on the same line by the category, by the name of the type
     (which is a word like `int' or `float'), and then by names of
     attributes of objects of that type.  Thus, you could use this
     command for describing `int' or `float', in which case you could
     use `data type' as the category.  (A data type is a category of
     certain objects for purposes of deciding which operations can be
     performed on them.)

     In Lisp, for example,  "pair" names a particular data type, and an
     object of that type has two slots called the CAR and the CDR.
     Here is how you would write the first line of a definition of
     `pair'.

          @deftp {Data type} pair car cdr
          ...
          @end deftp

     The template is:

          @deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...
          BODY-OF-DEFINITION
          @end deftp

     `@deftp' creates an entry in the index of data types.


File: texinfo.info,  Node: Def Cmd Conventions,  Next: Sample Function Definition,  Prev: Def Cmds in Detail,  Up: Definition Commands

15.5 Conventions for Writing Definitions
========================================

When you write a definition using `@deffn', `@defun', or one of the
other definition commands, please take care to use arguments that
indicate the meaning, as with the COUNT argument to the `forward-word'
function.  Also, if the name of an argument contains the name of a
type, such as INTEGER, take care that the argument actually is of that
type.


File: texinfo.info,  Node: Sample Function Definition,  Prev: Def Cmd Conventions,  Up: Definition Commands

15.6 A Sample Function Definition
=================================

A function definition uses the `@defun' and `@end defun' commands.  The
name of the function follows immediately after the `@defun' command and
it is followed, on the same line, by the parameter list.

  Here is a definition from *Note Calling Functions: (lispref)Calling
Functions.

      -- Function: apply function &rest arguments
          `apply' calls FUNCTION with ARGUMENTS, just like `funcall'
          but with one difference: the last of ARGUMENTS is a list of
          arguments to give to FUNCTION, rather than a single argument.
          We also say that this list is "appended" to the other
          arguments.

          `apply' returns the result of calling FUNCTION.  As with
          `funcall', FUNCTION must either be a Lisp function or a
          primitive function; special forms and macros do not make
          sense in `apply'.

               (setq f 'list)
                    => list
               (apply f 'x 'y 'z)
               error--> Wrong type argument: listp, z
               (apply '+ 1 2 '(3 4))
                    => 10
               (apply '+ '(1 2 3 4))
                    => 10

               (apply 'append '((a b c) nil (x y z) nil))
                    => (a b c x y z)

          An interesting example of using `apply' is found in the
          description of `mapcar'.

  In the Texinfo source file, this example looks like this:

     @defun apply function &rest arguments

     @code{apply} calls @var{function} with
     @var{arguments}, just like @code{funcall} but with one
     difference: the last of @var{arguments} is a list of
     arguments to give to @var{function}, rather than a single
     argument.  We also say that this list is @dfn{appended}
     to the other arguments.

     @code{apply} returns the result of calling
     @var{function}.  As with @code{funcall},
     @var{function} must either be a Lisp function or a
     primitive function; special forms and macros do not make
     sense in @code{apply}.

     @example
     (setq f 'list)
          @result{} list
     (apply f 'x 'y 'z)
     @error{} Wrong type argument: listp, z
     (apply '+ 1 2 '(3 4))
          @result{} 10
     (apply '+ '(1 2 3 4))
          @result{} 10

     (apply 'append '((a b c) nil (x y z) nil))
          @result{} (a b c x y z)
     @end example

     An interesting example of using @code{apply} is found
     in the description of @code{mapcar}.@refill
     @end defun

In this manual, this function is listed in the Command and Variable
Index under `apply'.

  Ordinary variables and user options are described using a format like
that for functions except that variables do not take arguments.


File: texinfo.info,  Node: Footnotes,  Next: Conditionals,  Prev: Definition Commands,  Up: Top

16 Footnotes
************

A "footnote" is for a reference that documents or elucidates the
primary text.(1) (*note Footnotes-Footnote-1::)

* Menu:

* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.


File: texinfo.info,  Node: Footnotes-Footnotes,  Up: Footnotes

  (1) A footnote should complement or expand upon the primary text, but
a reader should not need to read a footnote to understand the primary
text.  For a thorough discussion of footnotes, see `The Chicago Manual
of Style', which is published by the University of Chicago Press.


File: texinfo.info,  Node: Footnote Commands,  Next: Footnote Styles,  Prev: Footnotes,  Up: Footnotes

16.1 Footnote Commands
======================

In Texinfo, footnotes are created with the `@footnote' command.  This
command is followed immediately by a left brace, then by the text of
the footnote, and then by a terminating right brace.  Footnotes may be
of any length (they will be broken across pages if necessary), but are
usually short.  The template is:

     ordinary text@footnote{TEXT OF FOOTNOTE}

  As shown here, the `@footnote' command should come right after the
text being footnoted, with no intervening space; otherwise, the
formatters the footnote mark might end up starting up a line.

  For example, this clause is followed by a sample footnote(1) (*note
Footnote Commands-Footnote-1::); in the Texinfo source, it looks like
this:

     ...a sample footnote@footnote{Here is the sample
     footnote.}; in the Texinfo source...

  *Warning:* Don't use footnotes in the argument of the `@item' command
for a `@table' table.  This doesn't work, and because of limitations of
TeX, there is no way to fix it.  You must put the footnote into the
body text of the table.

  In a printed manual or book, the reference mark for a footnote is a
small, superscripted number; the text of the footnote appears at the
bottom of the page, below a horizontal line.

  In Info, the reference mark for a footnote is a pair of parentheses
with the footnote number between them, like this: `(1)'.


File: texinfo.info,  Node: Footnote Commands-Footnotes,  Up: Footnote Commands

  (1) Here is the sample footnote.


File: texinfo.info,  Node: Footnote Styles,  Prev: Footnote Commands,  Up: Footnotes

16.2 Footnote Styles
====================

Info has two footnote styles, which determine where the text of the
footnote is located:

   * In the `End' node style, all the footnotes for a single node are
     placed at the end of that node.  The footnotes are separated from
     the rest of the node by a line of dashes with the word `Footnotes'
     within it.  Each footnote begins with an `(N)' reference mark.

     Here is an example of a single footnote in the end of node style:

           --------- Footnotes ---------

          (1)  Here is a sample footnote.

   * In the `Separate' node style, all the footnotes for a single node
     are placed in an automatically constructed node of their own.  In
     this style, a "footnote reference" follows each `(N)' reference
     mark in the body of the node.  The footnote reference is actually
     a cross reference which you use to reach the footnote node.

     The name of the node containing the footnotes is constructed by
     appending `-Footnotes' to the name of the node that contains the
     footnotes. (Consequently, the footnotes' node for the `Footnotes'
     node is `Footnotes-Footnotes'!)  The footnotes' node has an `Up'
     node pointer that leads back to its parent node.

     Here is how the first footnote in this manual looks after being
     formatted for Info in the separate node style:

          File: texinfo.info  Node: Overview-Footnotes, Up: Overview

          (1) Note that the first syllable of "Texinfo" is
          pronounced like "speck", not "hex". ...

  A Texinfo file may be formatted into an Info file with either footnote
style.

  Use the `@footnotestyle' command to specify an Info file's footnote
style.  Write this command at the beginning of a line followed by an
argument, either `end' for the end node style or `separate' for the
separate node style.

  For example,

     @footnotestyle end
  or
     @footnotestyle separate

  Write an `@footnotestyle' command before or shortly after the
end-of-header line at the beginning of a Texinfo file.  (If you include
the `@footnotestyle' command between the start-of-header and
end-of-header lines, the region formatting commands will format
footnotes as specified.)

  If you do not specify a footnote style, the formatting commands use
their default style.  Currently, `texinfo-format-buffer' and
`texinfo-format-region' use the `separate' style and `makeinfo' uses
the `end' style.

  This chapter contains two footnotes.


File: texinfo.info,  Node: Conditionals,  Next: Macros,  Prev: Footnotes,  Up: Top

17 Conditionally Visible Text
*****************************

Sometimes it is good to use different text for a printed manual and its
corresponding Info file.  In this case, you can use the "conditional
commands" to specify which text is for the printed manual and which is
for the Info file.

* Menu:

* Conditional Commands::        Specifying text for HTML, Info, or TeX.
* Conditional Not Commands::    Specifying text for not HTML, Info, or TeX.
* Raw Formatter Commands::      Using raw TeX or HTML commands.
* set clear value::             Designating which text to format (for
                                  all output formats); and how to set a
                                  flag to a string that you can insert.


File: texinfo.info,  Node: Conditional Commands,  Next: Conditional Not Commands,  Prev: Conditionals,  Up: Conditionals

Conditional Commands
====================

  `@ifinfo' begins segments of text that should be ignored by TeX when
it typesets the printed manual.  The segment of text appears only in
the Info file.  The `@ifinfo' command should appear on a line by
itself;  end the Info-only text with a line containing `@end ifinfo' by
itself.  At the beginning of a Texinfo file, the Info permissions are
contained within a region marked by `@ifinfo' and `@end ifinfo'. (*Note
Info Summary and Permissions::.)

  The `@iftex' and `@end iftex' commands are similar to the `@ifinfo'
and `@end ifinfo' commands, except that they specify text that will
appear in the printed manual but not in the Info file.  Likewise for
`@ifhtml' and `@end ifhtml', which specify text to appear only in HTML
output.

  For example,

     @iftex
     This text will appear only in the printed manual.
     @end iftex
     @ifinfo
     However, this text will appear only in Info.
     @end ifinfo

The preceding example produces the following line: However, this text
will appear only in Info.

Note how you only see one of the two lines, depending on whether you
are reading the Info version or the printed version of this manual.

  The `@titlepage' command is a special variant of `@iftex' that is
used for making the title and copyright pages of the printed manual.
(*Note `@titlepage': titlepage.)


File: texinfo.info,  Node: Conditional Not Commands,  Next: Raw Formatter Commands,  Prev: Conditional Commands,  Up: Conditionals

17.1 Conditional Not Commands
=============================

You can specify text to be included in any output format _other_ than
some given one with the `@ifnot...' commands:
     @ifnothtml ... @end ifnothtml
     @ifnotinfo ... @end ifnotinfo
     @ifnottex ... @end ifnottex
  (The `@ifnot...' command and the `@end' command must actually appear
on lines by themselves.)

  If the output file is not being made for the given format, the region
is included.  Otherwise, it is ignored.

  The regions delimited by these commands are ordinary Texinfo source as
with `@iftex', not raw formatter source as with `@tex'.


File: texinfo.info,  Node: Raw Formatter Commands,  Next: set clear value,  Prev: Conditional Not Commands,  Up: Conditionals

17.2 Raw Formatter Commands
===========================

Inside a region delineated by `@iftex' and `@end iftex', you can embed
some raw TeX commands.  Info will ignore these commands since they are
only in that part of the file which is seen by TeX.  You can write the
TeX commands as you would write them in a normal TeX file, except that
you must replace the `\' used by TeX with an `@'.  For example, in the
`@titlepage' section of a Texinfo file, you can use the TeX command
`@vskip' to format the copyright page.  (The `@titlepage' command
causes Info to ignore the region automatically, as it does with the
`@iftex' command.)

  However, many features of plain TeX will not work, as they are
overridden by Texinfo features.

  You can enter plain TeX completely, and use `\' in the TeX commands,
by delineating a region with the `@tex' and `@end tex' commands.  (The
`@tex' command also causes Info to ignore the region, like the `@iftex'
command.)  The sole exception is that `@' chracter still introduces a
command, so that `@end tex' can be recognized properly.

  For example, here is a mathematical expression written in plain TeX:

     @tex
     $$ \chi^2 = \sum_{i=1}^N
               \left (y_i - (a + b x_i)
               \over \sigma_i\right)^2 $$
     @end tex

The output of this example will appear only in a printed manual.  If
you are reading this in Info, you will not see the equation that appears
in the printed manual.

  Analogously, you can use `@ifhtml ... @end ifhtml' to delimit a
region to be included in HTML output only, and `@html ...  @end ifhtml'
for a region of raw HTML (again, except that `@' is still the escape
character, so the `@end' command can be recognized.)


File: texinfo.info,  Node: set clear value,  Prev: Raw Formatter Commands,  Up: Conditionals

17.3 `@set', `@clear', and `@value'
===================================

You can direct the Texinfo formatting commands to format or ignore parts
of a Texinfo file with the `@set', `@clear', `@ifset', and `@ifclear'
commands.

  In addition, you can use the `@set FLAG' command to set the value of
FLAG to a string of characters; and use `@value{FLAG}' to insert that
string.  You can use `@set', for example, to set a date and use
`@value' to insert the date in several places in the Texinfo file.

* Menu:

* ifset ifclear::               Format a region if a flag is set.
* value::                       Replace a flag with a string.
* value Example::               An easy way to update edition information.


File: texinfo.info,  Node: ifset ifclear,  Next: value,  Prev: set clear value,  Up: set clear value

17.3.1 `@ifset' and `@ifclear'
------------------------------

When a FLAG is set, the Texinfo formatting commands format text between
subsequent pairs of `@ifset FLAG' and `@end ifset' commands.  When the
FLAG is cleared, the Texinfo formatting commands do _not_ format the
text.

  Use the `@set FLAG' command to turn on, or "set", a FLAG; a "flag"
can be any single word.  The format for the command looks like this: 

     @set FLAG

  Write the conditionally formatted text between `@ifset FLAG' and
`@end ifset' commands, like this:

     @ifset FLAG
     CONDITIONAL-TEXT
     @end ifset

  For example, you can create one document that has two variants, such
as a manual for a `large' and `small' model:

     You can use this machine to dig up shrubs
     without hurting them.

     @set large

     @ifset large
     It can also dig up fully grown trees.
     @end ifset

     Remember to replant promptly ...

In the example, the formatting commands will format the text between
`@ifset large' and `@end ifset' because the `large' flag is set.

  Use the `@clear FLAG' command to turn off, or "clear", a flag.
Clearing a flag is the opposite of setting a flag.  The command looks
like this:

     @clear FLAG

Write the command on a line of its own.

  When FLAG is cleared, the Texinfo formatting commands do _not_ format
the text between `@ifset FLAG' and `@end ifset'; that text is ignored
and does not appear in either printed or Info output.

  For example, if you clear the flag of the preceding example by writing
an `@clear large' command after the `@set large' command (but before
the conditional text), then the Texinfo formatting commands ignore the
text between the `@ifset large' and `@end ifset' commands.  In the
formatted output, that text does not appear; in both printed and Info
output, you see only the lines that say, "You can use this machine to
dig up shrubs without hurting them.  Remember to replant promptly ...".

  If a flag is cleared with an `@clear FLAG' command, then the
formatting commands format text between subsequent pairs of `@ifclear'
and `@end ifclear' commands.  But if the flag is set with `@set FLAG',
then the formatting commands do _not_ format text between an `@ifclear'
and an `@end ifclear' command; rather, they ignore that text.  An
`@ifclear' command looks like this:

     @ifclear FLAG

  In brief, the commands are:

`@set FLAG'
     Tell the Texinfo formatting commands that FLAG is set.

`@clear FLAG'
     Tell the Texinfo formatting commands that FLAG is cleared.

`@ifset FLAG'
     If FLAG is set, tell the Texinfo formatting commands to format the
     text up to the following `@end ifset' command.

     If FLAG is cleared, tell the Texinfo formatting commands to ignore
     text up to the following `@end ifset' command.

`@ifclear FLAG'
     If FLAG is set, tell the Texinfo formatting commands to ignore the
     text up to the following `@end ifclear' command.

     If FLAG is cleared, tell the Texinfo formatting commands to format
     the text up to the following `@end ifclear' command.


File: texinfo.info,  Node: value,  Next: value Example,  Prev: ifset ifclear,  Up: set clear value

17.3.2 `@value'
---------------

You can use the `@set' command to specify a value for a flag, which is
expanded by the `@value' command.  The value is a string a characters.

  Write the `@set' command like this:

     @set foo This is a string.

This sets the value of `foo' to "This is a string."

  The Texinfo formatters replace an `@value{FLAG}' command with the
string to which FLAG is set.

  Thus, when `foo' is set as shown above, the Texinfo formatters convert

     @value{foo}
to
     This is a string.

  You can write an `@value' command within a paragraph; but you must
write an `@set' command on a line of its own.

  If you write the `@set' command like this:

     @set foo

without specifying a string, the value of `foo' is an empty string.

  If you clear a previously set flag with an `@clear FLAG' command, a
subsequent `@value{flag}' command is invalid and the string is replaced
with an error message that says `{No value for "FLAG"}'.

  For example, if you set `foo' as follows:

     @set how-much very, very, very

then the formatters transform

     It is a @value{how-much} wet day.
into
     It is a very, very, very wet day.

  If you write

     @clear how-much

then the formatters transform

     It is a @value{how-much} wet day.
into
     It is a {No value for "how-much"} wet day.


File: texinfo.info,  Node: value Example,  Prev: value,  Up: set clear value

17.3.3 `@value' Example
-----------------------

You can use the `@value' command to limit the number of places you need
to change when you record an update to a manual.  Here is how it is
done in `The GNU Make Manual':

Set the flags:

     @set EDITION 0.35 Beta
     @set VERSION 3.63 Beta
     @set UPDATED 14 August 1992
     @set UPDATE-MONTH August 1992

Write text for the first `@ifinfo' section, for people reading the
Texinfo file:

     This is Edition @value{EDITION},
     last updated @value{UPDATED},
     of @cite{The GNU Make Manual},
     for @code{make}, Version @value{VERSION}.

Write text for the title page, for people reading the printed manual:

     @title GNU Make
     @subtitle A Program for Directing Recompilation
     @subtitle Edition @value{EDITION}, ...
     @subtitle @value{UPDATE-MONTH}

(On a printed cover, a date listing the month and the year looks less
fussy than a date listing the day as well as the month and year.)

Write text for the Top node, for people reading the Info file:

     This is Edition @value{EDITION}
     of the @cite{GNU Make Manual},
     last updated @value{UPDATED}
     for @code{make} Version @value{VERSION}.

  After you format the manual, the text in the first `@ifinfo' section
looks like this:

     This is Edition 0.35 Beta, last updated 14 August 1992,
     of `The GNU Make Manual', for `make', Version 3.63 Beta.

  When you update the manual, change only the values of the flags; you
do not need to rewrite the three sections.


File: texinfo.info,  Node: Macros,  Next: Format/Print Hardcopy,  Prev: Conditionals,  Up: Top

18 Macros: Defining New Texinfo Commands
****************************************

A Texinfo "macro" allows you to define a new Texinfo command as any
sequence of text and/or existing commands (including other macros).  The
macro can have any number of "parameters"--text you supply each time
you use the macro.  (This has nothing to do with the `@defmac' command,
which is for documenting macros in the subject of the manual; *note Def
Cmd Template::.)

* Menu:

* Defining Macros::             Both defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.


File: texinfo.info,  Node: Defining Macros,  Next: Invoking Macros,  Prev: Macros,  Up: Macros

18.1 Defining Macros
====================

You use the Texinfo `@macro' command to define a macro.  For example:

     @macro MACRO-NAME{PARAM1, PARAM2, ...}
     TEXT ... \PARAM1\ ...
     @end macro

  The "parameters" PARAM1, PARAM2, ... correspond to arguments supplied
when the macro is subsequently used in the document (see the next
section).

  If a macro needs no parameters, you can define it either with an empty
list (`@macro foo {}') or with no braces at all (`@macro foo').

  The definition or "body" of the macro can contain any Texinfo
commands, including previously-defined macros.  (It is not possible to
have mutually recursive Texinfo macros.)  In the body, instances of a
parameter name surrounded by backslashes, as in `\PARAM1\' in the
example above, are replaced by the corresponding argument from the
macro invocation.

  You can undefine a macro FOO with `@unmacro FOO'.  It is not an error
to undefine a macro that is already undefined.  For example:

     @unmacro foo


File: texinfo.info,  Node: Invoking Macros,  Prev: Defining Macros,  Up: Macros

18.2 Invoking Macros
====================

After a macro is defined (see the previous section), you can use
("invoke") it in your document like this:

     @MACRO-NAME {ARG1, ARG2, ...}

and the result will be just as if you typed the body of MACRO-NAME at
that spot.  For example:

     @macro foo {p, q}
     Together: \p\ & \q\.
     @end macro
     @foo{a, b}

produces:

     Together: a & b.

  Thus, the arguments and parameters are separated by commas and
delimited by braces; any whitespace after (but not before) a comma is
ignored.  To insert a comma, brace, or backslash in an argument,
prepend a backslash, as in

     @MACRO-NAME {\\\{\}\,}

which will pass the (almost certainly error-producing) argument `\{},'
to MACRO-NAME.

  If the macro is defined to take a single argument, and is invoked
without any braces, the entire rest of the line after the macro name is
supplied as the argument.  For example:

     @macro bar {p}
     Twice: \p\, \p\.
     @end macro
     @bar aah

produces:

     Twice: aah, aah.


File: texinfo.info,  Node: Format/Print Hardcopy,  Next: Create an Info File,  Prev: Macros,  Up: Top

19 Format and Print Hardcopy
****************************

There are three major shell commands for making a printed manual from a
Texinfo file: one for converting the Texinfo file into a file that will
be printed, a second for sorting indices, and a third for printing the
formatted document.  When you use the shell commands, you can either
work directly in the operating system shell or work within a shell
inside GNU Emacs.

  If you are using GNU Emacs, you can use commands provided by Texinfo
mode instead of shell commands.  In addition to the three commands to
format a file, sort the indices, and print the result, Texinfo mode
offers key bindings for commands to recenter the output buffer, show the
print queue, and delete a job from the print queue.

* Menu:

* Use TeX::                     Use TeX to format for hardcopy.
* Format with tex/texindex::    How to format in a shell.
* Format with texi2dvi::        A simpler way to use the shell.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        TeX formatting requirements summary.
* Preparing for TeX::           What you need to do to use TeX.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on European A4 paper.
* Cropmarks and Magnification::  How to print marks to indicate the size
                                of pages and how to print scaled up output.


File: texinfo.info,  Node: Use TeX,  Next: Format with tex/texindex,  Prev: Format/Print Hardcopy,  Up: Format/Print Hardcopy

Use TeX
=======

  The typesetting program called TeX is used for formatting a Texinfo
file.  TeX is a very powerful typesetting program and, if used right,
does an exceptionally good job.  (*Note How to Obtain TeX: Obtaining
TeX, for information on how to obtain TeX.)

  The `makeinfo', `texinfo-format-region', and `texinfo-format-buffer'
commands read the very same @-commands in the Texinfo file as does TeX,
but process them differently to make an Info file; see *Note Create an
Info File::.


File: texinfo.info,  Node: Format with tex/texindex,  Next: Format with texi2dvi,  Prev: Use TeX,  Up: Format/Print Hardcopy

19.1 Format using `tex' and `texindex'
======================================

Format the Texinfo file with the shell command `tex' followed by the
name of the Texinfo file.  For example:

     tex foo.texi

TeX will produce a "DVI file" as well as several auxiliary files
containing information for indices, cross references, etc.  The DVI
file (for "DeVice Independent" file) can be printed on virtually any
printe (see the following sections).

  The `tex' formatting command itself does not sort the indices; it
writes an output file of unsorted index data.  (The `texi2dvi' command
automatically generates indices; see *Note Format using `texi2dvi':
Format with texi2dvi.)  To generate a printed index after running the
`tex' command, you first need a sorted index to work from.  The
`texindex' command sorts indices.  (The source file `texindex.c' comes
as part of the standard Texinfo distribution, among other places.)

  The `tex' formatting command outputs unsorted index files under names
that obey a standard convention: the name of your main input file with
any `.tex' (or similar, *note tex invocation: (web2c)tex invocation.)
extension removed, followed by the two letter names of indices.  For
example, the raw index output files for the input file `foo.texinfo'
would be `foo.cp', `foo.vr', `foo.fn', `foo.tp', `foo.pg' and `foo.ky'.
Those are exactly the arguments to give to `texindex'.

  Instead of specifying all the unsorted index file names explicitly,
you can use `??' as shell wildcards and give the command in this form:

     texindex foo.??

This command will run `texindex' on all the unsorted index files,
including any that you have defined yourself using `@defindex' or
`@defcodeindex'.  (You may execute `texindex foo.??' even if there are
similarly named files with two letter extensions that are not index
files, such as `foo.el'.  The `texindex' command reports but otherwise
ignores such files.)

  For each file specified, `texindex' generates a sorted index file
whose name is made by appending `s' to the input file name.  The
`@printindex' command knows to look for a file of that name (*note
Printing Indices & Menus::).  `texindex' does not alter the raw index
output file.

  After you have sorted the indices, you need to rerun the `tex'
formatting command on the Texinfo file.  This regenerates the DVI file,
this time with up-to-date index entries.

  Finally, you may need to run `tex' one more time, to get the page
numbers in the cross-references correct.

  To summarize, this is a four step process:

  1. Run `tex' on your Texinfo file.  This generates a DVI file (with
     undefined cross-references and no indices), and the raw index files
     (with two letter extensions).

  2. Run `texindex' on the raw index files.  This creates the
     corresponding sorted index files (with three letter extensions).

  3. Run `tex' again on your Texinfo file.  This regenerates the DVI
     file, this time with indices and defined cross-references, but
     with page numbers for the cross-references from last time,
     generally incorrect.

  4. Run `tex' one last time.  This time the correct page numbers are
     written for the cross-references.

  Alternatively, it's a one-step process: run `texi2dvi'.

  You need not run `texindex' each time after you run `tex'.  If you do
not, on the next run, the `tex' formatting command will use whatever
sorted index files happen to exist from the previous use of `texindex'.
This is usually ok while you are debugging.


File: texinfo.info,  Node: Format with texi2dvi,  Next: Print with lpr,  Prev: Format with tex/texindex,  Up: Format/Print Hardcopy

19.2 Format using `texi2dvi'
============================

The `texi2dvi' command automatically runs both `tex' and `texindex' as
many times as necessary to produce a DVI file with up-to-date, sorted
indices.  It simplifies the `tex'--`texindex'--`tex' sequence described
in the previous section.

  The syntax for `texi2dvi' is like this (where `prompt$' is your shell
prompt):

     prompt$ texi2dvi FILENAME...

  For a list of options, run `texi2dvi --help'.


File: texinfo.info,  Node: Print with lpr,  Next: Within Emacs,  Prev: Format with texi2dvi,  Up: Format/Print Hardcopy

19.3 Shell Print Using `lpr -d'
===============================

The precise command to print a DVI file depends on your system
installation, but `lpr -d' is common.  The command may require the DVI
file name without any extension or with a `.dvi' extension.  (If it is
`lpr', you must include the `.dvi'.)

  The following commands, for example, will (probably) suffice to sort
the indices, format, and print the `Bison Manual':

     tex bison.texinfo
     texindex bison.??
     tex bison.texinfo
     lpr -d bison.dvi

(Remember that the shell commands may be different at your site; but
these are commonly used versions.)

  Using the `texi2dvi' shell script, you simply need type:

     texi2dvi bison.texinfo
     lpr -d bison.dvi


File: texinfo.info,  Node: Within Emacs,  Next: Texinfo Mode Printing,  Prev: Print with lpr,  Up: Format/Print Hardcopy

19.4 From an Emacs Shell
========================

You can give formatting and printing commands from a shell within GNU
Emacs.  To create a shell within Emacs, type `M-x shell'.  In this
shell, you can format and print the document.  *Note Format and Print
Hardcopy: Format/Print Hardcopy, for details.

  You can switch to and from the shell buffer while `tex' is running
and do other editing.  If you are formatting a long document on a slow
machine, this can be very convenient.

  You can also use `texi2dvi' from an Emacs shell.  For example, here
is how to use `texi2dvi' to format and print `Using and Porting GNU CC'
from a shell within Emacs:

     texi2dvi gcc.texinfo
     lpr -d gcc.dvi

  *Note Texinfo Mode Printing::, for more information about formatting
and printing in Texinfo mode.


File: texinfo.info,  Node: Texinfo Mode Printing,  Next: Compile-Command,  Prev: Within Emacs,  Up: Format/Print Hardcopy

19.5 Formatting and Printing in Texinfo Mode
============================================

Texinfo mode provides several predefined key commands for TeX
formatting and printing.  These include commands for sorting indices,
looking at the printer queue, killing the formatting job, and
recentering the display of the buffer in which the operations occur.

`C-c C-t C-b'
`M-x texinfo-tex-buffer'
     Run `texi2dvi' on the current buffer.

`C-c C-t C-r'
`M-x texinfo-tex-region'
     Run TeX on the current region.

`C-c C-t C-i'
`M-x texinfo-texindex'
     Sort the indices of a Texinfo file formatted with
     `texinfo-tex-region'.

`C-c C-t C-p'
`M-x texinfo-tex-print'
     Print a DVI file that was made with `texinfo-tex-region' or
     `texinfo-tex-buffer'.

`C-c C-t C-q'
`M-x tex-show-print-queue'
     Show the print queue.

`C-c C-t C-d'
`M-x texinfo-delete-from-print-queue'
     Delete a job from the print queue; you will be prompted for the job
     number shown by a preceding `C-c C-t C-q' command
     (`texinfo-show-tex-print-queue').

`C-c C-t C-k'
`M-x tex-kill-job'
     Kill the currently running TeX job started by `texinfo-tex-region'
     or `texinfo-tex-buffer', or any other process running in the
     Texinfo shell buffer.

`C-c C-t C-x'
`M-x texinfo-quit-job'
     Quit a TeX formatting job that has stopped because of an error by
     sending an <x> to it.  When you do this, TeX preserves a record of
     what it did in a `.log' file.

`C-c C-t C-l'
`M-x tex-recenter-output-buffer'
     Redisplay the shell buffer in which the TeX printing and formatting
     commands are run to show its most recent output.

  Thus, the usual sequence of commands for formatting a buffer is as
follows (with comments to the right):

     C-c C-t C-b             Run `texi2dvi' on the buffer.
     C-c C-t C-p             Print the DVI file.
     C-c C-t C-q             Display the printer queue.

  The Texinfo mode TeX formatting commands start a subshell in Emacs
called the `*tex-shell*'.  The `texinfo-tex-command',
`texinfo-texindex-command', and `tex-dvi-print-command' commands are
all run in this shell.

  You can watch the commands operate in the `*tex-shell*' buffer, and
you can switch to and from and use the `*tex-shell*' buffer as you
would any other shell buffer.

  The formatting and print commands depend on the values of several
variables.  The default values are:

          Variable                              Default value

     texinfo-texi2dvi-command                  "texi2dvi"
     texinfo-tex-command                       "tex"
     texinfo-texindex-command                  "texindex"
     texinfo-delete-from-print-queue-command   "lprm"
     texinfo-tex-trailer                       "@bye"
     tex-start-of-header                       "%**start"
     tex-end-of-header                         "%**end"
     tex-dvi-print-command                     "lpr -d"
     tex-show-queue-command                    "lpq"

  You can change the values of these variables with the `M-x
edit-options' command (*note Editing Variable Values: (xemacs)Edit
Options.), with the `M-x set-variable' command (*note Examining and
Setting Variables: (xemacs)Examining.), or with your `.emacs'
initialization file (*note Init File: (xemacs)Init File.).


File: texinfo.info,  Node: Compile-Command,  Next: Requirements Summary,  Prev: Texinfo Mode Printing,  Up: Format/Print Hardcopy

19.6 Using the Local Variables List
===================================

Yet another way to apply the TeX formatting command to a Texinfo file
is to put that command in a "local variables list" at the end of the
Texinfo file.  You can then specify the `tex' or `texi2dvi' commands as
a `compile-command' and have Emacs run it by typing `M-x compile'.
This creates a special shell called the `*compilation*' buffer in which
Emacs runs the compile command.  For example, at the end of the
`gdb.texinfo' file, after the `@bye', you could put the following:

     Local Variables:
     compile-command: "texi2dvi gdb.texinfo"
     End:

This technique is most often used by programmers who also compile
programs this way; see *Note Compilation: (xemacs)Compilation.


File: texinfo.info,  Node: Requirements Summary,  Next: Preparing for TeX,  Prev: Compile-Command,  Up: Format/Print Hardcopy

19.7 TeX Formatting Requirements Summary
========================================

Every Texinfo file that is to be input to TeX must begin with a
`\input' command and must contain an `@setfilename' command:

     \input texinfo
     @setfilename ARG-NOT-USED-BY-@TEX{}

The first command instructs TeX to load the macros it needs to process
a Texinfo file and the second command opens auxiliary files.

  Every Texinfo file must end with a line that terminates TeX's
processing and forces out unfinished pages:

     @bye

  Strictly speaking, these lines are all a Texinfo file needs to be
processed successfully by TeX.

  Usually, however, the beginning includes an `@settitle' command to
define the title of the printed manual, an `@setchapternewpage'
command, a title page, a copyright page, and permissions.  Besides an
`@bye', the end of a file usually includes indices and a table of
contents.  (And of course most manuals contain a body of text as well.)

For more information, see
*Note `@settitle': settitle,
*Note `@setchapternewpage': setchapternewpage,
*Note Page Headings: Headings,
*Note Titlepage & Copyright Page::,
*Note Printing Indices & Menus::, and
*Note Contents::.


File: texinfo.info,  Node: Preparing for TeX,  Next: Overfull hboxes,  Prev: Requirements Summary,  Up: Format/Print Hardcopy

19.8 Preparing to Use TeX
=========================

TeX needs to know where to find the `texinfo.tex' file that you have
told it to input with the `\input texinfo' command at the beginning of
the first line.  The `texinfo.tex' file tells TeX how to handle
@-commands; it is included in all standard GNU distributions.

  Usually, the `texinfo.tex' file is put under the default directory
that contains TeX macros
(`/usr/local/share/texmf/tex/texinfo/texinfo.tex' by default) when GNU
Emacs or other GNU software is installed.  In this case, TeX will find
the file and you do not need to do anything special.  Alternatively,
you can put `texinfo.tex' in the current directory when you run TeX,
and TeX will find it there.

  Also, you should install `epsf.tex' in the same place as
`texinfo.tex', if it is not already installed from another
distribution.  This file is needed to support the `@image' command
(*note Images::).

  Optionally, you may create an additional `texinfo.cnf', and install
it as well.  This file is read by TeX at the `@setfilename' command
(*note `@setfilename': setfilename.).  You can put any commands you
like there according to local site-wide conventions, and they will be
read by TeX when processing any Texinfo document.  For example, if
`texinfo.cnf' contains the a single line `@afourpaper' (*note A4
Paper::), then all Texinfo documents will be processed with that page
size in effect.  If you have nothing to put in `texinfo.cnf', you do
not need to create it.

  If neither of the above locations for these system files suffice for
you, you can specify the directories explicitly.  For `texinfo.tex',
you can do this by writing the complete path for the file after the
`\input' command.  Another way, that works for both `texinfo.tex' and
`texinfo.cnf' (and any other file TeX might read), is to set the
`TEXINPUTS' environment variable in your `.cshrc' or `.profile' file.

  Which you use of `.cshrc' or `.profile' depends on whether you use a
Bourne shell-compatible (`sh', `bash', `ksh', ...) or C
shell-compatible (`csh', `tcsh') command interpreter.  The latter read
the `.cshrc' file for initialization information, and the former read
`.profile'.

  In a `.cshrc' file, you could use the following `csh' command
sequence:

     setenv TEXINPUTS .:/home/me/mylib:/usr/lib/tex/macros

  In a `.profile' file, you could use the following `sh' command
sequence:

     TEXINPUTS=.:/home/me/mylib:/usr/lib/tex/macros
     export TEXINPUTS

This would cause TeX to look for `\input' file first in the current
directory, indicated by the `.', then in a hypothetical user's
`me/mylib' directory, and finally in a system directory.


File: texinfo.info,  Node: Overfull hboxes,  Next: smallbook,  Prev: Preparing for TeX,  Up: Format/Print Hardcopy

19.9 Overfull "hboxes"
======================

TeX is sometimes unable to typeset a line without extending it into the
right margin.  This can occur when TeX comes upon what it interprets as
a long word that it cannot hyphenate, such as an electronic mail
network address or a very long title.  When this happens, TeX prints an
error message like this:

     Overfull \hbox (20.76302pt too wide)

(In TeX, lines are in "horizontal boxes", hence the term, "hbox".  The
backslash, `\', is the TeX equivalent of `@'.)

  TeX also provides the line number in the Texinfo source file and the
text of the offending line, which is marked at all the places that TeX
knows how to hyphenate words.  *Note Catching Errors with TeX
Formatting: Debugging with TeX, for more information about typesetting
errors.

  If the Texinfo file has an overfull hbox, you can rewrite the sentence
so the overfull hbox does not occur, or you can decide to leave it.  A
small excursion into the right margin often does not matter and may not
even be noticeable.

  However, unless told otherwise, TeX will print a large, ugly, black
rectangle beside the line that contains the overfull hbox.  This is so
you will notice the location of the problem if you are correcting a
draft.

  To prevent such a monstrosity from marring your final printout, write
the following in the beginning of the Texinfo file on a line of its own,
before the `@titlepage' command:

     @finalout


File: texinfo.info,  Node: smallbook,  Next: A4 Paper,  Prev: Overfull hboxes,  Up: Format/Print Hardcopy

19.10 Printing "Small" Books
============================

By default, TeX typesets pages for printing in an 8.5 by 11 inch
format.  However, you can direct TeX to typeset a document in a 7 by
9.25 inch format that is suitable for bound books by inserting the
following command on a line by itself at the beginning of the Texinfo
file, before the title page:

     @smallbook

(Since regular sized books are often about 7 by 9.25 inches, this
command might better have been called the `@regularbooksize' command,
but it came to be called the `@smallbook' command by comparison to the
8.5 by 11 inch format.)

  If you write the `@smallbook' command between the start-of-header and
end-of-header lines, the Texinfo mode TeX region formatting command,
`texinfo-tex-region', will format the region in "small" book size
(*note Start of Header::).

  The Free Software Foundation distributes printed copies of `The GNU
Emacs Manual' and other manuals in the "small" book size.  *Note
`@smallexample' and `@smalllisp': smallexample & smalllisp, for
information about commands that make it easier to produce examples for
a smaller manual.

  Alternatively, to avoid embedding this physical paper size in your
document, use `texi2dvi' to format your document (*note Format with
texi2dvi::), and supply `-t @smallbook' as an argument.  Then other
people do not have to change the document source file to format it
differently.


File: texinfo.info,  Node: A4 Paper,  Next: Cropmarks and Magnification,  Prev: smallbook,  Up: Format/Print Hardcopy

19.11 Printing on A4 Paper
==========================

You can tell TeX to typeset a document for printing on European size A4
paper with the `@afourpaper' command.  Write the command on a line by
itself between `@iftex' and `@end iftex' lines near the beginning of
the Texinfo file, before the title page:

  For example, this is how you would write the header for this manual:

     \input texinfo    @c -*-texinfo-*-
     @c %**start of header
     @setfilename texinfo
     @settitle Texinfo
     @syncodeindex vr fn
     @iftex
     @afourpaper
     @end iftex
     @c %**end of header

  Alternatively, to avoid embedding this physical paper size in your
document, use `texi2dvi' to format your document (*note Format with
texi2dvi::), and supply `-t @afourpaper' as an argument.  Then other
people do not have to change the document source file to format it
differently.

  Another alternative: put the `@afourpaper' command in the file
`texinfo.cnf' that TeX will read.  (No need for `@iftex' there.)  This
will automatically typeset all the Texinfo documents at your site with
that paper size in effect.


File: texinfo.info,  Node: Cropmarks and Magnification,  Prev: A4 Paper,  Up: Format/Print Hardcopy

19.12 Cropmarks and Magnification
=================================

You can attempt to direct TeX to print cropmarks at the corners of
pages with the `@cropmarks' command.  Write the `@cropmarks' command on
a line by itself between `@iftex' and `@end iftex' lines near the
beginning of the Texinfo file, before the title page, like this:

     @iftex
     @cropmarks
     @end iftex

  This command is mainly for printers that typeset several pages on one
sheet of film; but you can attempt to use it to mark the corners of a
book set to 7 by 9.25 inches with the `@smallbook' command.  (Printers
will not produce cropmarks for regular sized output that is printed on
regular sized paper.)  Since different printing machines work in
different ways, you should explore the use of this command with a
spirit of adventure.  You may have to redefine the command in the
`texinfo.tex' definitions file.

  You can attempt to direct TeX to typeset pages larger or smaller than
usual with the `\mag' TeX command.  Everything that is typeset is
scaled proportionally larger or smaller.  (`\mag' stands for
"magnification".)  This is _not_ a Texinfo @-command, but is a plain
TeX command that is prefixed with a backslash.  You have to write this
command between `@tex' and `@end tex' (*note Raw Formatter Commands::).

  Follow the `\mag' command with an `=' and then a number that is 1000
times the magnification you desire.  For example, to print pages at 1.2
normal size, write the following near the beginning of the Texinfo
file, before the title page:

     @tex
     \mag=1200
     @end tex

  With some printing technologies, you can print normal-sized copies
that look better than usual by using a larger-than-normal master.

  Depending on your system, `\mag' may not work or may work only at
certain magnifications.  Be prepared to experiment.


File: texinfo.info,  Node: Create an Info File,  Next: Install an Info File,  Prev: Format/Print Hardcopy,  Up: Top

20 Creating an Info File
************************

`makeinfo' is a utility that converts a Texinfo file into an Info file;
`texinfo-format-region' and `texinfo-format-buffer' are GNU Emacs
functions that do the same.

  A Texinfo file must contain an `@setfilename' line near its
beginning, otherwise the Info formatting commands will fail.

  For information on installing the Info file in the Info system, see
*Note Install an Info File::.

* Menu:

* makeinfo advantages::         `makeinfo' provides better error checking.
* Invoking makeinfo::           How to run `makeinfo' from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run `makeinfo' from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                  in Emacs Lisp are an alternative
                                  to `makeinfo'.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                  to run better.


File: texinfo.info,  Node: makeinfo advantages,  Next: Invoking makeinfo,  Prev: Create an Info File,  Up: Create an Info File

`makeinfo' Preferred
====================

  The `makeinfo' utility creates an Info file from a Texinfo source
file more quickly than either of the Emacs formatting commands and
provides better error messages.  We recommend it.  `makeinfo' is a C
program that is independent of Emacs.  You do not need to run Emacs to
use `makeinfo', which means you can use `makeinfo' on machines that are
too small to run Emacs. You can run `makeinfo' in any one of three
ways: from an operating system shell, from a shell inside Emacs, or by
typing a key command in Texinfo mode in Emacs.

  The `texinfo-format-region' and the `texinfo-format-buffer' commands
are useful if you cannot run `makeinfo'.  Also, in some circumstances,
they format short regions or buffers more quickly than `makeinfo'.


File: texinfo.info,  Node: Invoking makeinfo,  Next: makeinfo options,  Prev: makeinfo advantages,  Up: Create an Info File

20.1 Running `makeinfo' from a Shell
====================================

To create an Info file from a Texinfo file, type `makeinfo' followed by
the name of the Texinfo file.  Thus, to create the Info file for Bison,
type the following to the shell: is the prompt):

     makeinfo bison.texinfo

  (You can run a shell inside Emacs by typing `M-x shell'.)

  Sometimes you will want to specify options.  For example, if you wish
to discover which version of `makeinfo' you are using, type:

     makeinfo --version

  *Note makeinfo options::, for more information.


File: texinfo.info,  Node: makeinfo options,  Next: Pointer Validation,  Prev: Invoking makeinfo,  Up: Create an Info File

20.2 Options for `makeinfo'
===========================

The `makeinfo' command takes a number of options.  Most often, options
are used to set the value of the fill column and specify the footnote
style.  Each command line option is a word preceded by `--' or a letter
preceded by `-'.  You can use abbreviations for the long option names
as long as they are unique.

  For example, you could use the following shell command to create an
Info file for `bison.texinfo' in which each line is filled to only 68
columns:

     makeinfo --fill-column=68 bison.texinfo

  You can write two or more options in sequence, like this:

     makeinfo --no-split --fill-column=70 ...

This would keep the Info file together as one possibly very long file
and would also set the fill column to 70.

  The options are:

`-D VAR'
     Cause the variable VAR to be defined.  This is equivalent to `@set
     VAR' in the Texinfo file (*note set clear value::).

`--error-limit=LIMIT'
     Set the maximum number of errors that `makeinfo' will report
     before exiting (on the assumption that continuing would be
     useless); default 100.

`--fill-column=WIDTH'
     Specify the maximum number of columns in a line; this is the
     right-hand edge of a line.  Paragraphs that are filled will be
     filled to this width.  (Filling is the process of breaking up and
     connecting lines so that lines are the same length as or shorter
     than the number specified as the fill column.  Lines are broken
     between words.) The default value is 72.

`--footnote-style=STYLE'
     Set the footnote style to STYLE, either `end' for the end node
     style (the default) or `separate' for the separate node style.
     The value set by this option overrides the value set in a Texinfo
     file by an `@footnotestyle' command (*note Footnotes::).  When the
     footnote style is `separate', `makeinfo' makes a new node
     containing the footnotes found in the current node.  When the
     footnote style is `end', `makeinfo' places the footnote references
     at the end of the current node.

`--force'
     Ordinarily, if the input file has errors, the output files are not
     created.  With this option, they are preserved.

`--help'
     Print a usage message listing all available options, then exit
     successfully.

`-I DIR'
     Add `dir' to the directory search list for finding files that are
     included using the `@include' command.  By default, `makeinfo'
     searches only the current directory.

`--no-headers'
     Do not include menus or node lines in the output.  This results in
     an ASCII file that you cannot read in Info since it does not
     contain the requisite nodes or menus. It is primarily useful to
     extract certain pieces of a manual into separate files to be
     included in a distribution, such as `INSTALL' files.

`--no-split'
     Suppress the splitting stage of `makeinfo'.  By default, large
     output files (where the size is greater than 70k bytes) are split
     into smaller subfiles, each one approximately 50k bytes.

`--no-pointer-validate'
`--no-validate'
     Suppress the pointer-validation phase of `makeinfo'.  Normally,
     after a Texinfo file is processed, some consistency checks are
     made to ensure that cross references can be resolved, etc.  *Note
     Pointer Validation::.

`--no-warn'
     Suppress warning messages (but _not_ error messages).  You might
     want this if the file you are creating has examples of Texinfo
     cross references within it, and the nodes that are referenced do
     not actually exist.

`--no-number-footnotes'
     Suppress automatic footnote numbering.  By default, `makeinfo'
     numbers each footnote sequentially in a single node, resetting the
     current footnote number to 1 at the start of each node.

`--output=FILE'
`-o FILE'
     Specify that the output should be directed to FILE and not to the
     file name specified in the `@setfilename' command found in the
     Texinfo source (*note setfilename::).  If FILE is `-', output goes
     to standard output and `--no-split' is implied.

`-P DIR'
     Prepend `dir' to the directory search list for `@include'.  See
     `-I' for more details.

`--paragraph-indent=INDENT'
     Set the paragraph indentation style to INDENT.  The value set by
     this option overrides the value set in a Texinfo file by an
     `@paragraphindent' command (*note paragraphindent::).  The value
     of INDENT is interpreted as follows:

    `asis'
          Preserve any existing indentation at the starts of paragraphs.

    `0' or `none'
          Delete any existing indentation.

    NUM
          Indent each paragraph by that number of spaces.

`--reference-limit=LIMIT'
     Set the value of the number of references to a node that
     `makeinfo' will make without reporting a warning.  If a node has
     more than this number of references in it, `makeinfo' will make the
     references but also report a warning.  The default is 1000.

`-U VAR'
     Cause VAR to be undefined.  This is equivalent to `@clear VAR' in
     the Texinfo file (*note set clear value::).

`--verbose'
     Cause `makeinfo' to display messages saying what it is doing.
     Normally, `makeinfo' only outputs messages if there are errors or
     warnings.

`--version'
     Print the version number, then exit successfully.



File: texinfo.info,  Node: Pointer Validation,  Next: makeinfo in Emacs,  Prev: makeinfo options,  Up: Create an Info File

20.3 Pointer Validation
=======================

If you do not suppress pointer-validation, `makeinfo' will check the
validity of the final Info file.  Mostly, this means ensuring that
nodes you have referenced really exist.  Here is a complete list of what
is checked:

  1. If a `Next', `Previous', or `Up' node reference is a reference to a
     node in the current file and is not an external reference such as
     to `(dir)', then the referenced node must exist.

  2. In every node, if the `Previous' node is different from the `Up'
     node, then the `Previous' node must also be pointed to by a `Next'
     node.

  3. Every node except the `Top' node must have an `Up' pointer.

  4. The node referenced by an `Up' pointer must contain a reference to
     the current node in some manner other than through a `Next'
     reference.  This includes menu entries and cross references.

  5. If the `Next' reference of a node is not the same as the `Next'
     reference of the `Up' reference, then the node referenced by the
     `Next' pointer must have a `Previous' pointer that points back to
     the current node.  This rule allows the last node in a section to
     point to the first node of the next chapter.


File: texinfo.info,  Node: makeinfo in Emacs,  Next: texinfo-format commands,  Prev: Pointer Validation,  Up: Create an Info File

20.4 Running `makeinfo' inside Emacs
====================================

You can run `makeinfo' in GNU Emacs Texinfo mode by using either the
`makeinfo-region' or the `makeinfo-buffer' commands.  In Texinfo mode,
the commands are bound to `C-c C-m C-r' and `C-c C-m C-b' by default.

`C-c C-m C-r'
`M-x makeinfo-region'
     Format the current region for Info.  

`C-c C-m C-b'
`M-x makeinfo-buffer'
     Format the current buffer for Info.  

  When you invoke either `makeinfo-region' or `makeinfo-buffer', Emacs
prompts for a file name, offering the name of the visited file as the
default.  You can edit the default file name in the minibuffer if you
wish, before pressing <RET> to start the `makeinfo' process.

  The Emacs `makeinfo-region' and `makeinfo-buffer' commands run the
`makeinfo' program in a temporary shell buffer.  If `makeinfo' finds
any errors, Emacs displays the error messages in the temporary buffer.

  You can parse the error messages by typing `C-x `' (`next-error').
This causes Emacs to go to and position the cursor on the line in the
Texinfo source that `makeinfo' thinks caused the error.  *Note Running
`make' or Compilers Generally: (xemacs)Compilation, for more
information about using the `next-error' command.

  In addition, you can kill the shell in which the `makeinfo' command
is running or make the shell buffer display its most recent output.

`C-c C-m C-k'
`M-x makeinfo-kill-job'
     Kill the current running `makeinfo' job created by
     `makeinfo-region' or `makeinfo-buffer'.

`C-c C-m C-l'
`M-x makeinfo-recenter-output-buffer'
     Redisplay the `makeinfo' shell buffer to display its most recent
     output.

(Note that the parallel commands for killing and recentering a TeX job
are `C-c C-t C-k' and `C-c C-t C-l'.  *Note Texinfo Mode Printing::.)

  You can specify options for `makeinfo' by setting the
`makeinfo-options' variable with either the `M-x edit-options' or the
`M-x set-variable' command, or by setting the variable in your `.emacs'
initialization file.

  For example, you could write the following in your `.emacs' file:

     (setq makeinfo-options
           "--paragraph-indent=0 --no-split
            --fill-column=70 --verbose")

For more information, see
*Note Editing Variable Values: (xemacs)Edit Options,
*Note Examining and Setting Variables: (xemacs)Examining,
*Note Init File: (xemacs)Init File, and
*Note Options for `makeinfo': makeinfo options.


File: texinfo.info,  Node: texinfo-format commands,  Next: Batch Formatting,  Prev: makeinfo in Emacs,  Up: Create an Info File

20.5 The `texinfo-format...' Commands
=====================================

In GNU Emacs in Texinfo mode, you can format part or all of a Texinfo
file with the `texinfo-format-region' command.  This formats the
current region and displays the formatted text in a temporary buffer
called `*Info Region*'.

  Similarly, you can format a buffer with the `texinfo-format-buffer'
command.  This command creates a new buffer and generates the Info file
in it.  Typing `C-x C-s' will save the Info file under the name
specified by the `@setfilename' line which must be near the beginning
of the Texinfo file.

`C-c C-e C-r'
``texinfo-format-region''
     Format the current region for Info.  

`C-c C-e C-b'
``texinfo-format-buffer''
     Format the current buffer for Info.  

  The `texinfo-format-region' and `texinfo-format-buffer' commands
provide you with some error checking, and other functions can provide
you with further help in finding formatting errors.  These procedures
are described in an appendix; see *Note Catching Mistakes::.  However,
the `makeinfo' program is often faster and provides better error
checking (*note makeinfo in Emacs::).


File: texinfo.info,  Node: Batch Formatting,  Next: Tag and Split Files,  Prev: texinfo-format commands,  Up: Create an Info File

20.6 Batch Formatting
=====================

You can format Texinfo files for Info using `batch-texinfo-format' and
Emacs Batch mode.  You can run Emacs in Batch mode from any shell,
including a shell inside of Emacs.  (*Note Command Line Switches and
Arguments: (xemacs)Command Switches.)

  Here is a shell command to format all the files that end in
`.texinfo' in the current directory:

     emacs -batch -funcall batch-texinfo-format *.texinfo

Emacs processes all the files listed on the command line, even if an
error occurs while attempting to format some of them.

  Run `batch-texinfo-format' only with Emacs in Batch mode as shown; it
is not interactive.  It kills the Batch mode Emacs on completion.

  `batch-texinfo-format' is convenient if you lack `makeinfo' and want
to format several Texinfo files at once.  When you use Batch mode, you
create a new Emacs process.  This frees your current Emacs, so you can
continue working in it.  (When you run `texinfo-format-region' or
`texinfo-format-buffer', you cannot use that Emacs for anything else
until the command finishes.)


File: texinfo.info,  Node: Tag and Split Files,  Prev: Batch Formatting,  Up: Create an Info File

20.7 Tag Files and Split Files
==============================

If a Texinfo file has more than 30,000 bytes, `texinfo-format-buffer'
automatically creates a tag table for its Info file;  `makeinfo' always
creates a tag table.  With a "tag table", Info can jump to new nodes
more quickly than it can otherwise.

  In addition, if the Texinfo file contains more than about 70,000
bytes, `texinfo-format-buffer' and `makeinfo' split the large Info file
into shorter "indirect" subfiles of about 50,000 bytes each.  Big files
are split into smaller files so that Emacs does not need to make a
large buffer to hold the whole of a large Info file; instead, Emacs
allocates just enough memory for the small, split off file that is
needed at the time.  This way, Emacs avoids wasting memory when you run
Info.  (Before splitting was implemented, Info files were always kept
short and "include files" were designed as a way to create a single,
large printed manual out of the smaller Info files.  *Note Include
Files::, for more information.  Include files are still used for very
large documents, such as `The XEmacs Lisp Reference Manual', in which
each chapter is a separate file.)

  When a file is split, Info itself makes use of a shortened version of
the original file that contains just the tag table and references to
the files that were split off.  The split off files are called
"indirect" files.

  The split off files have names that are created by appending `-1',
`-2', `-3' and so on to the file name specified by the `@setfilename'
command.  The shortened version of the original file continues to have
the name specified by `@setfilename'.

  At one stage in writing this document, for example, the Info file was
saved as `test-texinfo' and that file looked like this:

     Info file: test-texinfo,    -*-Text-*-
     produced by texinfo-format-buffer
     from file: new-texinfo-manual.texinfo

     ^_
     Indirect:
     test-texinfo-1: 102
     test-texinfo-2: 50422
     test-texinfo-3: 101300
     ^_^L
     Tag table:
     (Indirect)
     Node: overview^?104
     Node: info file^?1271
     Node: printed manual^?4853
     Node: conventions^?6855
     ...

(But `test-texinfo' had far more nodes than are shown here.)  Each of
the split off, indirect files, `test-texinfo-1', `test-texinfo-2', and
`test-texinfo-3', is listed in this file after the line that says
`Indirect:'.  The tag table is listed after the line that says `Tag
table:'.

  In the list of indirect files, the number following the file name
records the cumulative number of bytes in the preceding indirect files,
not counting the file list itself, the tag table, or the permissions
text in each file.  In the tag table, the number following the node name
records the location of the beginning of the node, in bytes from the
beginning.

  If you are using `texinfo-format-buffer' to create Info files, you
may want to run the `Info-validate' command.  (The `makeinfo' command
does such a good job on its own, you do not need `Info-validate'.)
However, you cannot run the `M-x Info-validate' node-checking command
on indirect files.  For information on how to prevent files from being
split and how to validate the structure of the nodes, see *Note Using
Info-validate::.


File: texinfo.info,  Node: Install an Info File,  Next: Command List,  Prev: Create an Info File,  Up: Top

21 Installing an Info File
**************************

Info files are usually kept in the `info' directory.  You can read Info
files using the standalone Info program or the Info reader built into
Emacs.  (*note info: (info)Top, for an introduction to Info.)

* Menu:

* Directory file::              The top level menu for all Info files.
* New Info File::               Listing a new info file.
* Other Info Directories::      How to specify Info files that are
                                  located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                  to the Info directory.
* Invoking install-info::       `install-info' options.


File: texinfo.info,  Node: Directory file,  Next: New Info File,  Prev: Install an Info File,  Up: Install an Info File

The `dir' File
==============

  For Info to work, the `info' directory must contain a file that
serves as a top level directory for the Info system.  By convention,
this file is called `dir'.  (You can find the location of this file
within Emacs by typing `C-h i' to enter Info and then typing `C-x C-f'
to see the pathname to the `info' directory.)

  The `dir' file is itself an Info file.  It contains the top level
menu for all the Info files in the system.  The menu looks like this:

     * Menu:

     * Info:    (info).     Documentation browsing system.
     * Emacs:   (emacs).    The extensible, self-documenting
                            text editor.
     * Texinfo: (texinfo).  With one source file, make
                            either a printed manual using
                            TeX or an Info file.
     ...

  Each of these menu entries points to the `Top' node of the Info file
that is named in parentheses.  (The menu entry does not need to specify
the `Top' node, since Info goes to the `Top' node if no node name is
mentioned.  *Note Nodes in Other Info Files: Other Info Files.)

  Thus, the `Info' entry points to the `Top' node of the `info' file
and the `Emacs' entry points to the `Top' node of the `emacs' file.

  In each of the Info files, the `Up' pointer of the `Top' node refers
back to the `dir' file.  For example, the line for the `Top' node of
the Emacs manual looks like this in Info:

     File: emacs  Node: Top, Up: (DIR), Next: Distrib

(Note that in this case, the `dir' file name is written in upper case
letters--it can be written in either upper or lower case.  Info has a
feature that it will change the case of the file name to lower case if
it cannot find the name as written.)


File: texinfo.info,  Node: New Info File,  Next: Other Info Directories,  Prev: Directory file,  Up: Install an Info File

21.1 Listing a New Info File
============================

To add a new Info file to your system, you must write a menu entry to
add to the menu in the `dir' file in the `info' directory.  For
example, if you were adding documentation for GDB, you would write the
following new entry:

     * GDB: (gdb).           The source-level C debugger.

The first part of the menu entry is the menu entry name, followed by a
colon.  The second part is the name of the Info file, in parentheses,
followed by a period.  The third part is the description.

  The name of an Info file often has a `.info' extension.  Thus, the
Info file for GDB might be called either `gdb' or `gdb.info'.  The Info
reader programs automatically try the file name both with and without
`.info'; so it is better to avoid clutter and not to write `.info'
explicitly in the menu entry.  For example, the GDB menu entry should
use just `gdb' for the file name, not `gdb.info'.


File: texinfo.info,  Node: Other Info Directories,  Next: Installing Dir Entries,  Prev: New Info File,  Up: Install an Info File

21.2 Info Files in Other Directories
====================================

If an Info file is not in the `info' directory, there are three ways to
specify its location:

   * Write the pathname in the `dir' file as the second part of the
     menu.

   * If you are using Emacs, list the name of the file in a second `dir'
     file, in its directory; and then add the name of that directory to
     the `Info-directory-list' variable in your personal or site
     initialization file.

     This tells Emacs where to look for `dir' files.  Emacs merges the
     files named `dir' from each of the listed directories.  (In Emacs
     version 18, you can set the `Info-directory' variable to the name
     of only one directory.)

   * Specify the Info directory name in the `INFOPATH' environment
     variable in your `.profile' or `.cshrc' initialization file.
     (Only you and others who set this environment variable will be
     able to find Info files whose location is specified this way.)

  For example, to reach a test file in the `/home/bob/manuals'
directory, you could add an entry like this to the menu in the `dir'
file:

     * Test: (/home/bob/manuals/info-test).  Bob's own test file.

In this case, the absolute file name of the `info-test' file is written
as the second part of the menu entry.

  Alternatively, you could write the following in your `.emacs' file:

     (setq Info-directory-list
           '("/home/bob/manuals"
             "/usr/local/info"))

  This tells Emacs to merge the `dir' file from the `/home/bob/manuals'
directory with the `dir' file from the `/usr/local/info' directory.
Info will list the `/home/bob/manuals/info-test' file as a menu entry
in the `/home/bob/manuals/dir' file.

  Finally, you can tell Info where to look by setting the `INFOPATH'
environment variable in your `.cshrc' or `.profile' file.  If you use a
Bourne-compatible shell such as `sh' or `bash' for your shell command
interpreter, you set the `INFOPATH' environment variable in the
`.profile' initialization file; but if you use `csh' or `tcsh', you
must set the variable in the `.cshrc' initialization file.  The two
types of shells use different syntax.

   * In a `.cshrc' file, you could set the `INFOPATH' variable as
     follows:

          setenv INFOPATH .:~/manuals:/usr/local/emacs/info

   * In a `.profile' file, you would achieve the same effect by writing:

          INFOPATH=.:$HOME/manuals:/usr/local/emacs/info
          export INFOPATH

The `.' indicates the current directory as usual.  Emacs uses the
`INFOPATH' environment variable to initialize the value of Emacs's own
`Info-directory-list' variable.

  However you set `INFOPATH', if its last character is a colon, this is
replaced by the default (compiled-in) path.  This gives you a way to
augment the default path with new directories without having to list all
the standard places.  For example (using `sh' syntax:

     INFOPATH=/local/info:
     export INFOPATH

will search `/local/info' first, then the standard directories.
Leading or doubled colons are not treated specially.


File: texinfo.info,  Node: Installing Dir Entries,  Next: Invoking install-info,  Prev: Other Info Directories,  Up: Install an Info File

21.3 Installing Info Directory Files
====================================

When you install an Info file onto your system, you can use the program
`install-info' to update the Info directory file `dir'.  Normally the
makefile for the package runs `install-info', just after copying the
Info file into its proper installed location.

  In order for the Info file to work with `install-info', you should
use the commands `@dircategory' and `@direntry' in the Texinfo source
file.  Use `@direntry' to specify the menu entry to add to the Info
directory file, and use `@dircategory' to specify which part of the
Info directory to put it in.  Here is how these commands are used in
this manual:

     @dircategory Texinfo documentation system
     @direntry
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     @end direntry

  Here's what this produces in the Info file:

     INFO-DIR-SECTION Texinfo documentation system
     START-INFO-DIR-ENTRY
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     END-INFO-DIR-ENTRY

The `install-info' program sees these lines in the Info file, and that
is how it knows what to do.

  Always use the `@direntry' and `@dircategory' commands near the
beginning of the Texinfo input, before the first `@node' command.  If
you use them later on in the input, `install-info' will not notice them.

  If you use `@dircategory' more than once in the Texinfo source, each
usage specifies one category; the new menu entry is added to the Info
directory file in each of the categories you specify.  If you use
`@direntry' more than once, each usage specifies one menu entry; each
of these menu entries is added to the directory in each of the
specified categories.


File: texinfo.info,  Node: Invoking install-info,  Prev: Installing Dir Entries,  Up: Install an Info File

21.4 Invoking install-info
==========================

`install-info' inserts menu entries from an Info file into the
top-level `dir' file in the Info system (see the previous sections for
an explanation of how the `dir' file works).  It's most often run as
part of software installation, or when constructing a dir file for all
manuals on a system.  Synopsis:

     install-info [OPTION]... [INFO-FILE [DIR-FILE]]

  If INFO-FILE or DIR-FILE are not specified, the various options
(described below) that define them must be.  There are no compile-time
defaults, and standard input is never used.  `install-info' can read
only one info file and write only one dir file per invocation.

  If DIR-FILE (however specified) does not exist, `install-info'
creates it if possible (with no entries).

  Options:

`--delete'
     Delete the entries in INFO-FILE from DIR-FILE.  The file name in
     the entry in DIR-FILE must be INFO-FILE (except for an optional
     `.info' in either one).  Don't insert any new entries.

`--dir-file=NAME'
     Specify file name of the Info directory file.  This is equivalent
     to using the DIR-FILE argument.

`--entry=TEXT'
     Insert TEXT as an Info directory entry; TEXT should have the form
     of an Info menu item line plus zero or more extra lines starting
     with whitespace.  If you specify more than one entry, they are all
     added.  If you don't specify any entries, they are determined from
     information in the Info file itself.

`--help'
     Display a usage message listing basic usage and all available
     options, then exit successfully.

`--info-file=FILE'
     Specify Info file to install in the directory.  This is equivalent
     to using the INFO-FILE argument.

`--info-dir=DIR'
     Equivalent to `--dir-file=DIR/dir'.

`--item=TEXT'
     Same as `--entry=TEXT'.  An Info directory entry is actually a
     menu item.

`--quiet'
     Suppress warnings.

`--remove'
     Same as `--delete'.

`--section=SEC'
     Put this file's entries in section SEC of the directory.  If you
     specify more than one section, all the entries are added in each
     of the sections.  If you don't specify any sections, they are
     determined from information in the Info file itself.

`--version'
     Display version information and exit successfully.



File: texinfo.info,  Node: Command List,  Next: Tips,  Prev: Install an Info File,  Up: Top

Appendix A @-Command List
*************************

Here is an alphabetical list of the @-commands in Texinfo.  Square
brackets, [ ], indicate optional arguments; an ellipsis, `...',
indicates repeated text.


`@WHITESPACE'
     An `@' followed by a space, tab, or newline produces a normal,
     stretchable, interword space.  *Note Multiple Spaces::.

`@!'
     Generate an exclamation point that really does end a sentence
     (usually after an end-of-sentence capital letter).  *Note Ending a
     Sentence::.

`@"'
`@''
     Generate an umlaut or acute accent, respectively, over the next
     character, as in o" and o'.  *Note Inserting Accents::.

`@*'
     Force a line break. Do not end a paragraph that uses `@*' with an
     `@refill' command.  *Note Line Breaks::.

`@,{C}'
     Generate a cedilla accent under C, as in c,.  *Note Inserting
     Accents::.

`@-'
     Insert a discretionary hyphenation point.  *Note - and
     hyphenation::.

`@.'
     Produce a period that really does end a sentence (usually after an
     end-of-sentence capital letter).  *Note Ending a Sentence::.

`@:'
     Indicate to TeX that an immediately preceding period, question
     mark, exclamation mark, or colon does not end a sentence.  Prevent
     TeX from inserting extra whitespace as it does at the end of a
     sentence.  The command has no effect on the Info file output.
     *Note Not Ending a Sentence::.

`@='
     Generate a macro (bar) accent over the next character, as in o=.
     *Note Inserting Accents::.

`@?'
     Generate a question mark that really does end a sentence (usually
     after an end-of-sentence capital letter).  *Note Ending a
     Sentence::.

`@@'
     Stands for an at sign, `@'.  *Note Inserting @ and braces: Braces
     Atsigns.

`@^'
`@`'
     Generate a circumflex (hat) or grave accent, respectively, over
     the next character, as in o^.  *Note Inserting Accents::.

`@{'
     Stands for a left brace, `{'.  *Note Inserting @ and braces:
     Braces Atsigns.

`@}'
     Stands for a right-hand brace, `}'.
     *Note Inserting @ and braces: Braces Atsigns.

`@='
     Generate a tilde accent over the next character, as in N~.  *Note
     Inserting Accents::.

`@AA{}'
`@aa{}'
     Generate the uppercase and lowercase Scandinavian A-ring letters,
     respectively: AA, aa.  *Note Inserting Accents::.

`@AE{}'
`@ae{}'
     Generate the uppercase and lowercase AE ligatures, respectively:
     AE, ae.  *Note Inserting Accents::.

`@afourpaper'
     Change page dimensions for the A4 paper size.  Only allowed inside
     `@iftex' ... `@end iftex'.  *Note A4 Paper::.

`@appendix TITLE'
     Begin an appendix.  The title appears in the table of contents of
     a printed manual.  In Info, the title is underlined with
     asterisks.  *Note The `@unnumbered' and `@appendix' Commands:
     unnumbered & appendix.

`@appendixsec TITLE'
`@appendixsection TITLE'
     Begin an appendix section within an appendix.  The section title
     appears in the table of contents of a printed manual.  In Info,
     the title is underlined with equal signs.  `@appendixsection' is a
     longer spelling of the `@appendixsec' command.  *Note Section
     Commands: unnumberedsec appendixsec heading.

`@appendixsubsec TITLE'
     Begin an appendix subsection within an appendix.  The title appears
     in the table of contents of a printed manual.  In Info, the title
     is underlined with hyphens.  *Note Subsection Commands:
     unnumberedsubsec appendixsubsec subheading.

`@appendixsubsubsec TITLE'
     Begin an appendix subsubsection within an appendix subsection.  The
     title appears in the table of contents of a printed manual.  In
     Info, the title is underlined with periods.  *Note The `subsub'
     Commands: subsubsection.

`@asis'
     Used following `@table', `@ftable', and `@vtable' to print the
     table's first column without highlighting ("as is").  *Note Making
     a Two-column Table: Two-column Tables.

`@author AUTHOR'
     Typeset AUTHOR flushleft and underline it.  *Note The `@title' and
     `@author' Commands: title subtitle author.

`@b{TEXT}'
     Print TEXT in bold font.  No effect in Info.  *Note Fonts::.

`@bullet{}'
     Generate a large round dot, or the closest possible thing to one.
     *Note `@bullet': bullet.

`@bye'
     Stop formatting a file.  The formatters do not see the contents of
     a file following an `@bye' command.  *Note Ending a File::.

`@c COMMENT'
     Begin a comment in Texinfo.  The rest of the line does not appear
     in either the Info file or the printed manual.  A synonym for
     `@comment'.  *Note Comments: Comments.

`@cartouche'
     Highlight an example or quotation by drawing a box with rounded
     corners around it.  Pair with `@end cartouche'.  No effect in
     Info.  *Note Drawing Cartouches Around Examples: cartouche.)

`@center LINE-OF-TEXT'
     Center the line of text following the command.  *Note `@center':
     titlefont center sp.

`@centerchap LINE-OF-TEXT'
     Like `@chapter', but centers the chapter title.  *Note `@chapter':
     chapter.

`@chapheading TITLE'
     Print a chapter-like heading in the text, but not in the table of
     contents of a printed manual.  In Info, the title is underlined
     with asterisks.  *Note `@majorheading' and `@chapheading':
     majorheading & chapheading.

`@chapter TITLE'
     Begin a chapter.  The chapter title appears in the table of
     contents of a printed manual.  In Info, the title is underlined
     with asterisks.  *Note `@chapter': chapter.

`@cindex ENTRY'
     Add ENTRY to the index of concepts.  *Note Defining the Entries of
     an Index: Index Entries.

`@cite{REFERENCE}'
     Highlight the name of a book or other reference that lacks a
     companion Info file.  *Note `@cite': cite.

`@clear FLAG'
     Unset FLAG, preventing the Texinfo formatting commands from
     formatting text between subsequent pairs of `@ifset FLAG' and
     `@end ifset' commands, and preventing `@value{FLAG}' from
     expanding to the value to which FLAG is set.  *Note `@set'
     `@clear' `@value': set clear value.

`@code{SAMPLE-CODE}'
     Highlight text that is an expression, a syntactically complete
     token of a program, or a program name.  *Note `@code': code.

`@comment COMMENT'
     Begin a comment in Texinfo.  The rest of the line does not appear
     in either the Info file or the printed manual.  A synonym for `@c'.
     *Note Comments: Comments.

`@contents'
     Print a complete table of contents.  Has no effect in Info, which
     uses menus instead.  *Note Generating a Table of Contents:
     Contents.

`@copyright{}'
     Generate a copyright symbol.  *Note `@copyright': copyright symbol.

`@defcodeindex INDEX-NAME'
     Define a new index and its indexing command.  Print entries in an
     `@code' font.  *Note Defining New Indices: New Indices.

`@defcv CATEGORY CLASS NAME'
`@defcvx CATEGORY CLASS NAME'
     Format a description for a variable associated with a class in
     object-oriented programming.  Takes three arguments: the category
     of thing being defined, the class to which it belongs, and its
     name.  *Note Definition Commands::, and *Note Def Cmds in Detail:
     deffnx.

`@deffn CATEGORY NAME ARGUMENTS...'
`@deffnx CATEGORY NAME ARGUMENTS...'
     Format a description for a function, interactive command, or
     similar entity that may take arguments.  `@deffn' takes as
     arguments the category of entity being described, the name of this
     particular entity, and its arguments, if any.  *Note Definition
     Commands::.

`@defindex INDEX-NAME'
     Define a new index and its indexing command.  Print entries in a
     roman font.  *Note Defining New Indices: New Indices.

`@definfoenclose NEW-COMMAND, BEFORE, AFTER,'
     Create new @-command for Info that marks text by enclosing it in
     strings that precede and follow the text.  Write definition inside
     of `@ifinfo' ... `@end ifinfo'. *Note Customized Highlighting::.

`@defivar CLASS INSTANCE-VARIABLE-NAME'
`@defivarx CLASS INSTANCE-VARIABLE-NAME'
     This command formats a description for an instance variable in
     object-oriented programming.  The command is equivalent to `@defcv
     {Instance Variable} ...'.  *Note Definition Commands::, and *Note
     Def Cmds in Detail: deffnx.

`@defmac MACRO-NAME ARGUMENTS...'
`@defmacx MACRO-NAME ARGUMENTS...'
     Format a description for a macro.  The command is equivalent to
     `@deffn Macro ...'.  *Note Definition Commands::, and *Note Def
     Cmds in Detail: deffnx.

`@defmethod CLASS METHOD-NAME ARGUMENTS...'
`@defmethodx CLASS METHOD-NAME ARGUMENTS...'
     Format a description for a method in object-oriented programming.
     The command is equivalent to `@defop Method ...'.  Takes as
     arguments the name of the class of the method, the name of the
     method, and its arguments, if any.  *Note Definition Commands::,
     and *Note Def Cmds in Detail: deffnx.

`@defop CATEGORY CLASS NAME ARGUMENTS...'
`@defopx CATEGORY CLASS NAME ARGUMENTS...'
     Format a description for an operation in object-oriented
     programming.  `@defop' takes as arguments the overall name of the
     category of operation, the name of the class of the operation, the
     name of the operation, and its arguments, if any.  *Note
     Definition Commands::, and *Note Def Cmds in Detail: deffnx.

`@defopt OPTION-NAME'
`@defoptx OPTION-NAME'
     Format a description for a user option.  The command is equivalent
     to `@defvr {User Option} ...'.  *Note Definition Commands::, and
     *Note Def Cmds in Detail: deffnx.

`@defspec SPECIAL-FORM-NAME ARGUMENTS...'
`@defspecx SPECIAL-FORM-NAME ARGUMENTS...'
     Format a description for a special form.  The command is
     equivalent to `@deffn {Special Form} ...'.  *Note Definition
     Commands::, and *Note Def Cmds in Detail: deffnx.

`@deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...'
`@deftpx CATEGORY NAME-OF-TYPE ATTRIBUTES...'
     Format a description for a data type.  `@deftp' takes as arguments
     the category, the name of the type (which is a word like `int' or
     `float'), and then the names of attributes of objects of that type.
     *Note Definition Commands::, and *Note Def Cmds in Detail: deffnx.

`@deftypefn CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
`@deftypefnx CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
     Format a description for a function or similar entity that may take
     arguments and that is typed.  `@deftypefn' takes as arguments the
     classification of entity being described, the type, the name of the
     entity, and its arguments, if any.  *Note Definition Commands::,
     and *Note Def Cmds in Detail: deffnx.

`@deftypefun DATA-TYPE FUNCTION-NAME ARGUMENTS...'
`@deftypefunx DATA-TYPE FUNCTION-NAME ARGUMENTS...'
     Format a description for a function in a typed language.  The
     command is equivalent to `@deftypefn Function ...'.  *Note
     Definition Commands::, and *Note Def Cmds in Detail: deffnx.

`@deftypemethod CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
`@deftypemethodx CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
     Format a description for a typed method in object-oriented
     programming.  Takes as arguments the name of the class of the
     method, the return type of the method, the name of the method, and
     its arguments, if any.  *Note Definition Commands::, and *Note Def
     Cmds in Detail: deffnx.

`@deftypevr CLASSIFICATION DATA-TYPE NAME'
`@deftypevrx CLASSIFICATION DATA-TYPE NAME'
     Format a description for something like a variable in a typed
     language--an entity that records a value.  Takes as arguments the
     classification of entity being described, the type, and the name
     of the entity.  *Note Definition Commands::, and *Note Def Cmds in
     Detail: deffnx.

`@deftypevar DATA-TYPE VARIABLE-NAME'
`@deftypevarx DATA-TYPE VARIABLE-NAME'
     Format a description for a variable in a typed language.  The
     command is equivalent to `@deftypevr Variable ...'.  *Note
     Definition Commands::, and *Note Def Cmds in Detail: deffnx.

`@defun FUNCTION-NAME ARGUMENTS...'
`@defunx FUNCTION-NAME ARGUMENTS...'
     Format a description for functions.  The command is equivalent to
     `@deffn Function ...'.  *Note Definition Commands::, and *Note Def
     Cmds in Detail: deffnx.

`@defvar VARIABLE-NAME'
`@defvarx VARIABLE-NAME'
     Format a description for variables.  The command is equivalent to
     `@defvr Variable ...'.  *Note Definition Commands::, and *Note Def
     Cmds in Detail: deffnx.

`@defvr CATEGORY NAME'
`@defvrx CATEGORY NAME'
     Format a description for any kind of variable.  `@defvr' takes as
     arguments the category of the entity and the name of the entity.
     *Note Definition Commands::, and *Note Def Cmds in Detail: deffnx.

`@detailmenu{}'
     Avoid `makeinfo' confusion stemming from the detailed node listing
     in a master menu.  *Note Master Menu Parts::.

`@dfn{TERM}'
     Highlight the introductory or defining use of a term.  *Note
     `@dfn': dfn.

`@dircategory DIRPART'
     Specify a part of the Info directory menu where this file's entry
     should go.  *Note Installing Dir Entries::.

`@direntry'
     Begin the Info directory menu entry for this file.  *Note
     Installing Dir Entries::.

`@display'
     Begin a kind of example.  Indent text, do not fill, do not select a
     new font.  Pair with `@end display'.  *Note `@display': display.

`@dmn{DIMENSION}'
     Format a unit of measure, as in 12pt.  Causes TeX to insert a thin
     space before DIMENSION.  No effect in Info.  *Note `@dmn': dmn.

`@dotaccent{C}'
     Generate a dot accent over the character C, as in oo..  *Note
     Inserting Accents::.

`@dots{}'
     Insert an ellipsis: `...'.  *Note `@dots{}': dots.

`@email{ADDRESS[, DISPLAYED-TEXT]}'
     Indicate an electronic mail address.  *Note `@email': email.

`@emph{TEXT}'
     Highlight TEXT; text is displayed in _italics_ in printed output,
     and surrounded by asterisks in Info.  *Note Emphasizing Text:
     Emphasis.

`@end ENVIRONMENT'
     Ends ENVIRONMENT, as in `@end example'.  *Note @-commands:
     Formatting Commands.

`@enddots{}'
     Generate an end-of-sentence of ellipsis, like this ....  *Note
     `@dots{}': dots.

`@enumerate [NUMBER-OR-LETTER]'
     Begin a numbered list, using `@item' for each entry.  Optionally,
     start list with NUMBER-OR-LETTER.  Pair with `@end enumerate'.
     *Note `@enumerate': enumerate.

`@equiv{}'
     Indicate to the reader the exact equivalence of two forms with a
     glyph: `=='.  *Note Equivalence::.

`@error{}'
     Indicate to the reader with a glyph that the following text is an
     error message: `error-->'.  *Note Error Glyph::.

`@evenfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@evenheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify page footings resp. headings for even-numbered (left-hand)
     pages.  Only allowed inside `@iftex'.  *Note How to Make Your Own
     Headings: Custom Headings.

`@everyfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@everyheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify page footings resp. headings for every page.  Not relevant
     to Info.  *Note How to Make Your Own Headings: Custom Headings.

`@example'
     Begin an example.  Indent text, do not fill, and select
     fixed-width font.  Pair with `@end example'.  *Note `@example':
     example.

`@exclamdown{}'
     Produce an upside-down exclamation point.  *Note Inserting
     Accents::.

`@exdent LINE-OF-TEXT'
     Remove any indentation a line might have.  *Note Undoing the
     Indentation of a Line: exdent.

`@expansion{}'
     Indicate the result of a macro expansion to the reader with a
     special glyph: `==>'.  *Note ==> Indicating an Expansion:
     expansion.

`@file{FILENAME}'
     Highlight the name of a file, buffer, node, or directory.  *Note
     `@file': file.

`@finalout'
     Prevent TeX from printing large black warning rectangles beside
     over-wide lines.  *Note Overfull hboxes::.

`@findex ENTRY'
     Add ENTRY to the index of functions.  *Note Defining the Entries
     of an Index: Index Entries.

`@flushleft'
`@flushright'
     Left justify every line but leave the right end ragged.  Leave
     font as is.  Pair with `@end flushleft'.  `@flushright' analogous.
     *Note `@flushleft' and `@flushright': flushleft & flushright.

`@footnote{TEXT-OF-FOOTNOTE}'
     Enter a footnote.  Footnote text is printed at the bottom of the
     page by TeX; Info may format in either `End' node or `Separate'
     node style.  *Note Footnotes::.

`@footnotestyle STYLE'
     Specify an Info file's footnote style, either `end' for the end
     node style or `separate' for the separate node style.  *Note
     Footnotes::.

`@format'
     Begin a kind of example.  Like `@example' or `@display', but do
     not narrow the margins and do not select the fixed-width font.
     Pair with `@end format'.  *Note `@example': example.

`@ftable FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry.
     Automatically enter each of the items in the first column into the
     index of functions.  Pair with `@end ftable'.  The same as
     `@table', except for indexing.  *Note `@ftable' and `@vtable':
     ftable vtable.

`@group'
     Hold text together that must appear on one printed page.  Pair with
     `@end group'.  Not relevant to Info.  *Note `@group': group.

`@H{C}'
     Generate the long Hungarian umlaut accent over C, as in o''.

`@heading TITLE'
     Print an unnumbered section-like heading in the text, but not in
     the table of contents of a printed manual.  In Info, the title is
     underlined with equal signs.  *Note Section Commands:
     unnumberedsec appendixsec heading.

`@headings ON-OFF-SINGLE-DOUBLE'
     Turn page headings on or off, and/or specify single-sided or
     double-sided page headings for printing.  *Note The `@headings'
     Command: headings on off.

`@html'
     Enter HTML completely.  Pair with `@end html'.  *Note Raw
     Formatter Commands::.

`@hyphenation{HY-PHEN-A-TED WORDS}'
     Explicitly define hyphenation points.  *Note `@-' and
     `@hyphenation': - and hyphenation.

`@i{TEXT}'
     Print TEXT in italic font.  No effect in Info.  *Note Fonts::.

`@ifclear FLAG'
     If FLAG is cleared, the Texinfo formatting commands format text
     between `@ifclear FLAG' and the following `@end ifclear' command.
     *Note `@set' `@clear' `@value': set clear value.

`@ifhtml'
`@ifinfo'
     Begin a stretch of text that will be ignored by TeX when it
     typesets the printed manual.  The text appears only in the HTML
     resp. Info file.  Pair with `@end ifhtml' resp. `@end ifinfo'.
     *Note Conditionals::.

`@ifnothtml'
`@ifnotinfo'
`@ifnottex'
     Begin a stretch of text that will be ignored in one output format
     but not the others.  The text appears only in the format not
     specified.  Pair with `@end ifnothtml' resp. `@end ifnotinfo' resp.
     `@end ifnotinfo'.  *Note Conditionals::.

`@ifset FLAG'
     If FLAG is set, the Texinfo formatting commands format text
     between `@ifset FLAG' and the following `@end ifset' command.
     *Note `@set' `@clear' `@value': set clear value.

`@iftex'
     Begin a stretch of text that will not appear in the Info file, but
     will be processed only by TeX.  Pair with `@end iftex'.  *Note
     Conditionally Visible Text: Conditionals.

`@ignore'
     Begin a stretch of text that will not appear in either the Info
     file or the printed output.  Pair with `@end ignore'.  *Note
     Comments and Ignored Text: Comments.

`@image{FILENAME, [WIDTH], [HEIGHT]}'
     Include graphics image in external FILENAME scaled to the given
     WIDTH and/or HEIGHT.  *Note Images::.

`@include FILENAME'
     Incorporate the contents of the file FILENAME into the Info file
     or printed document.  *Note Include Files::.

`@inforef{NODE-NAME, [ENTRY-NAME], INFO-FILE-NAME}'
     Make a cross reference to an Info file for which there is no
     printed manual.  *Note Cross references using `@inforef': inforef.

`\input MACRO-DEFINITIONS-FILE'
     Use the specified macro definitions file.  This command is used
     only in the first line of a Texinfo file to cause TeX to make use
     of the `texinfo' macro definitions file.  The backslash in `\input'
     is used instead of an `@' because TeX does not recognize `@' until
     after it has read the definitions file.  *Note The Texinfo File
     Header: Header.

`@item'
     Indicate the beginning of a marked paragraph for `@itemize' and
     `@enumerate'; indicate the beginning of the text of a first column
     entry for `@table', `@ftable', and `@vtable'.  *Note Lists and
     Tables::.

`@itemize  MARK-GENERATING-CHARACTER-OR-COMMAND'
     Produce a sequence of indented paragraphs, with a mark inside the
     left margin at the beginning of each paragraph.  Pair with `@end
     itemize'.  *Note `@itemize': itemize.

`@itemx'
     Like `@item' but do not generate extra vertical space above the
     item text.  *Note `@itemx': itemx.

`@kbd{KEYBOARD-CHARACTERS}'
     Indicate text that is characters of input to be typed by users.
     *Note `@kbd': kbd.

`@kbdinputstyle STYLE'
     Specify when `@kbd' should use a font distinct from `@code'.
     *Note `@kbd': kbd.

`@key{KEY-NAME}'
     Indicate a name for a key on a keyboard.  *Note `@key': key.

`@kindex ENTRY'
     Add ENTRY to the index of keys.  *Note Defining the Entries of an
     Index: Index Entries.

`@L{}'
`@l{}'
     Generate the uppercase and lowercase Polish suppressed-L letters,
     respectively: /L, /l.

`@lisp'
     Begin an example of Lisp code.  Indent text, do not fill, and
     select fixed-width font.  Pair with `@end lisp'.  *Note `@lisp':
     Lisp Example.

`@lowersections'
     Change subsequent chapters to sections, sections to subsections,
     and so on. *Note `@raisesections' and `@lowersections':
     Raise/lower sections.

`@macro MACRO-NAME {PARAMS}'
     Define a new Texinfo command `@MACRO-NAME{PARAMS}'.  Only
     supported by `makeinfo' and `texi2dvi'.  *Note Defining Macros::.

`@majorheading TITLE'
     Print a chapter-like heading in the text, but not in the table of
     contents of a printed manual.  Generate more vertical whitespace
     before the heading than the `@chapheading' command.  In Info, the
     chapter heading line is underlined with asterisks.  *Note
     `@majorheading' and `@chapheading': majorheading & chapheading.

`@math{MATHEMATICAL-EXPRESSION}'
     Format a mathematical expression.  *Note `@math' - Inserting
     Mathematical Expressions: math.

`@menu'
     Mark the beginning of a menu of nodes in Info.  No effect in a
     printed manual.  Pair with `@end menu'.  *Note Menus::.

`@minus{}'
     Generate a minus sign, `-'.  *Note `@minus': minus.

`@multitable COLUMN-WIDTH-SPEC'
     Begin a multi-column table.  Pair with `@end multitable'.  *Note
     Multitable Column Widths::.

`@need N'
     Start a new page in a printed manual if fewer than N mils
     (thousandths of an inch) remain on the current page.  *Note
     `@need': need.

`@node NAME, NEXT, PREVIOUS, UP'
     Define the beginning of a new node in Info, and serve as a locator
     for references for TeX.  *Note `@node': node.

`@noindent'
     Prevent text from being indented as if it were a new paragraph.
     *Note `@noindent': noindent.

`@O{}'
`@o{}'
     Generate the uppercase and lowercase O-with-slash letters,
     respectively: /O, /o.

`@oddfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@oddheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify page footings resp. headings for odd-numbered (right-hand)
     pages.  Only allowed inside `@iftex'.  *Note How to Make Your Own
     Headings: Custom Headings.

`@OE{}'
`@oe{}'
     Generate the uppercase and lowercase OE ligatures, respectively:
     OE, oe.  *Note Inserting Accents::.

`@page'
     Start a new page in a printed manual.  No effect in Info.  *Note
     `@page': page.

`@paragraphindent INDENT'
     Indent paragraphs by INDENT number of spaces; delete indentation
     if the value of INDENT is 0; and do not change indentation if
     INDENT is `asis'. *Note Paragraph Indenting: paragraphindent.

`@pindex ENTRY'
     Add ENTRY to the index of programs.  *Note Defining the Entries of
     an Index: Index Entries.

`@point{}'
     Indicate the position of point in a buffer to the reader with a
     glyph: `-!-'.  *Note Indicating Point in a Buffer: Point Glyph.

`@pounds{}'
     Generate the pounds sterling currency sign.  *Note `@pounds{}':
     pounds.

`@print{}'
     Indicate printed output to the reader with a glyph: `-|'.  *Note
     Print Glyph::.

`@printindex INDEX-NAME'
     Print an alphabetized two-column index in a printed manual or
     generate an alphabetized menu of index entries for Info.  *Note
     Printing Indices & Menus::.

`@pxref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     Make a reference that starts with a lower case `see' in a printed
     manual.  Use within parentheses only.  Do not follow command with a
     punctuation mark--the Info formatting commands automatically insert
     terminating punctuation as needed.  Only the first argument is
     mandatory.  *Note `@pxref': pxref.

`@questiondown{}'
     Generate an upside-down question mark.  *Note Inserting Accents::.

`@quotation'
     Narrow the margins to indicate text that is quoted from another
     real or imaginary work.  Write command on a line of its own.  Pair
     with `@end quotation'.  *Note `@quotation': quotation.

`@r{TEXT}'
     Print TEXT in roman font.  No effect in Info.  *Note Fonts::.

`@raisesections'
     Change subsequent sections to chapters, subsections to sections,
     and so on.  *Note `@raisesections' and `@lowersections':
     Raise/lower sections.

`@ref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     Make a reference.  In a printed manual, the reference does not
     start with a `See'.  Follow command with a punctuation mark.  Only
     the first argument is mandatory.  *Note `@ref': ref.

`@refill'
     In Info, refill and indent the paragraph after all the other
     processing has been done.  No effect on TeX, which always refills.
     This command is no longer needed, since all formatters now
     automatically refill.  *Note Refilling Paragraphs::.

`@result{}'
     Indicate the result of an expression to the reader with a special
     glyph: `=>'.  *Note `@result': result.

`@ringaccent{C}'
     Generate a ring accent over the next character, as in o*.  *Note
     Inserting Accents::.

`@samp{TEXT}'
     Highlight TEXT that is a literal example of a sequence of
     characters.  Used for single characters, for statements, and often
     for entire shell commands.  *Note `@samp': samp.

`@sc{TEXT}'
     Set TEXT in a printed output in THE SMALL CAPS FONT and set text
     in the Info file in uppercase letters.  *Note Smallcaps::.

`@section TITLE'
     Begin a section within a chapter.  In a printed manual, the section
     title is numbered and appears in the table of contents.  In Info,
     the title is underlined with equal signs.  *Note `@section':
     section.

`@set FLAG [STRING]'
     Make FLAG active, causing the Texinfo formatting commands to
     format text between subsequent pairs of `@ifset FLAG' and `@end
     ifset' commands.  Optionally, set value of FLAG to STRING.  *Note
     `@set' `@clear' `@value': set clear value.

`@setchapternewpage ON-OFF-ODD'
     Specify whether chapters start on new pages, and if so, whether on
     odd-numbered (right-hand) new pages.  *Note `@setchapternewpage':
     setchapternewpage.

`@setfilename INFO-FILE-NAME'
     Provide a name to be used by the Info file.  This command is
     essential for TeX formatting as well, even though it produces no
     output.  *Note `@setfilename': setfilename.

`@settitle TITLE'
     Provide a title for page headers in a printed manual.  *Note
     `@settitle': settitle.

`@shortcontents'
     Print a short table of contents.  Not relevant to Info, which uses
     menus rather than tables of contents.  A synonym for
     `@summarycontents'.  *Note Generating a Table of Contents:
     Contents.

`@shorttitlepage{TITLE}'
     Generate a minimal title page.  *Note `@titlepage': titlepage.

`@smallbook'
     Cause TeX to produce a printed manual in a 7 by 9.25 inch format
     rather than the regular 8.5 by 11 inch format.  *Note Printing
     Small Books: smallbook.  Also, see *Note `@smallexample' and
     `@smalllisp': smallexample & smalllisp.

`@smallexample'
     Indent text to indicate an example.  Do not fill, select
     fixed-width font.  In `@smallbook' format, print text in a smaller
     font than with `@example'.  Pair with `@end smallexample'.  *Note
     `@smallexample' and `@smalllisp': smallexample & smalllisp.

`@smalllisp'
     Begin an example of Lisp code.  Indent text, do not fill, select
     fixed-width font.  In `@smallbook' format, print text in a smaller
     font.  Pair with `@end smalllisp'.  *Note `@smallexample' and
     `@smalllisp': smallexample & smalllisp.

`@sp N'
     Skip N blank lines.  *Note `@sp': sp.

`@ss{}'
     Generate the German sharp-S es-zet letter, ss.  *Note Inserting
     Accents::.

`@strong TEXT'
     Emphasize TEXT by typesetting it in a *bold* font for the printed
     manual and by surrounding it with asterisks for Info.  *Note
     Emphasizing Text: emph & strong.

`@subheading TITLE'
     Print an unnumbered subsection-like heading in the text, but not in
     the table of contents of a printed manual.  In Info, the title is
     underlined with hyphens.  *Note `@unnumberedsubsec'
     `@appendixsubsec' `@subheading': unnumberedsubsec appendixsubsec
     subheading.

`@subsection TITLE'
     Begin a subsection within a section.  In a printed manual, the
     subsection title is numbered and appears in the table of contents.
     In Info, the title is underlined with hyphens.  *Note
     `@subsection': subsection.

`@subsubheading TITLE'
     Print an unnumbered subsubsection-like heading in the text, but
     not in the table of contents of a printed manual.  In Info, the
     title is underlined with periods.  *Note The `subsub' Commands:
     subsubsection.

`@subsubsection TITLE'
     Begin a subsubsection within a subsection.  In a printed manual,
     the subsubsection title is numbered and appears in the table of
     contents.  In Info, the title is underlined with periods.  *Note
     The `subsub' Commands: subsubsection.

`@subtitle TITLE'
     In a printed manual, set a subtitle in a normal sized font flush to
     the right-hand side of the page.  Not relevant to Info, which does
     not have title pages.  *Note `@title' `@subtitle' and `@author'
     Commands: title subtitle author.

`@summarycontents'
     Print a short table of contents.  Not relevant to Info, which uses
     menus rather than tables of contents.  A synonym for
     `@shortcontents'.  *Note Generating a Table of Contents: Contents.

`@syncodeindex FROM-INDEX INTO-INDEX'
     Merge the index named in the first argument into the index named in
     the second argument, printing the entries from the first index in
     `@code' font.  *Note Combining Indices::.

`@synindex FROM-INDEX INTO-INDEX'
     Merge the index named in the first argument into the index named in
     the second argument.  Do not change the font of FROM-INDEX
     entries.  *Note Combining Indices::.

`@t{TEXT}'
     Print TEXT in a fixed-width, typewriter-like font.  No effect in
     Info.  *Note Fonts::.

`@tab'
     Separate columns in a multitable.  *Note Multitable Rows::.

`@table FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry.  Write
     each first column entry on the same line as `@item'.  First column
     entries are printed in the font resulting from FORMATTING-COMMAND.
     Pair with `@end table'.  *Note Making a Two-column Table:
     Two-column Tables.  Also see *Note `@ftable' and `@vtable': ftable
     vtable, and *Note `@itemx': itemx.

`@TeX{}'
     Insert the logo TeX.  *Note Inserting TeX and (C): TeX and
     copyright.

`@tex'
     Enter TeX completely.  Pair with `@end tex'.  *Note Raw Formatter
     Commands::.

`@thischapter'
`@thischaptername'
`@thisfile'
`@thispage'
`@thistitle'
     Only allowed in a heading or footing.  Stands for the number and
     name of the current chapter (in the format `Chapter 1: Title'),
     the chapter name only, the filename, the current page number, and
     the title of the document, respectively.  *Note How to Make Your
     Own Headings: Custom Headings.

`@tieaccent{CC}'
     Generate a tie-after accent over the next two characters CC, as in
     `oo['.  *Note Inserting Accents::.

`@tindex ENTRY'
     Add ENTRY to the index of data types.  *Note Defining the Entries
     of an Index: Index Entries.

`@title TITLE'
     In a printed manual, set a title flush to the left-hand side of the
     page in a larger than normal font and underline it with a black
     rule.  Not relevant to Info, which does not have title pages.
     *Note The `@title' `@subtitle' and `@author' Commands: title
     subtitle author.

`@titlefont{TEXT}'
     In a printed manual, print TEXT in a larger than normal font.  Not
     relevant to Info, which does not have title pages.  *Note The
     `@titlefont' `@center' and `@sp' Commands: titlefont center sp.

`@titlepage'
     Indicate to Texinfo the beginning of the title page.  Write
     command on a line of its own.  Pair with `@end titlepage'.
     Nothing between `@titlepage' and `@end titlepage' appears in Info.
     *Note `@titlepage': titlepage.

`@today{}'
     Insert the current date, in `1 Jan 1900' style.  *Note How to Make
     Your Own Headings: Custom Headings.

`@top TITLE'
     In a Texinfo file to be formatted with `makeinfo', identify the
     topmost `@node' line in the file, which must be written on the line
     immediately preceding the `@top' command.  Used for `makeinfo''s
     node pointer insertion feature.  The title is underlined with
     asterisks.  Both the `@node' line and the `@top' line normally
     should be enclosed by `@ifinfo' and `@end ifinfo'.  In TeX and
     `texinfo-format-buffer', the `@top' command is merely a synonym
     for `@unnumbered'.  *Note Creating Pointers with `makeinfo':
     makeinfo Pointer Creation.

`@u{C}'
`@ubaraccent{C}'
`@udotaccent{C}'
     Generate a breve, underbar, or underdot accent, respectively, over
     or under the character C, as in o(, o_, .o.  *Note Inserting
     Accents::.

`@unnumbered TITLE'
     In a printed manual, begin a chapter that appears without chapter
     numbers of any kind.  The title appears in the table of contents
     of a printed manual.  In Info, the title is underlined with
     asterisks.  *Note `@unnumbered' and `@appendix': unnumbered &
     appendix.

`@unnumberedsec TITLE'
     In a printed manual, begin a section that appears without section
     numbers of any kind.  The title appears in the table of contents
     of a printed manual.  In Info, the title is underlined with equal
     signs.  *Note Section Commands: unnumberedsec appendixsec heading.

`@unnumberedsubsec TITLE'
     In a printed manual, begin an unnumbered subsection within a
     chapter.  The title appears in the table of contents of a printed
     manual.  In Info, the title is underlined with hyphens.  *Note
     `@unnumberedsubsec' `@appendixsubsec' `@subheading':
     unnumberedsubsec appendixsubsec subheading.

`@unnumberedsubsubsec TITLE'
     In a printed manual, begin an unnumbered subsubsection within a
     chapter.  The title appears in the table of contents of a printed
     manual.  In Info, the title is underlined with periods.  *Note The
     `subsub' Commands: subsubsection.

`@uref{URL[, DISPLAYED-TEXT}'
     Define a cross reference to an external uniform resource locator
     for the World Wide Web.  *Note `@url': url.

`@url{URL}'
     Indicate text that is a uniform resource locator for the World Wide
     Web.  *Note `@url': url.

`@v{C}'
     Generate check accent over the character C, as in o<.  *Note
     Inserting Accents::.

`@value{FLAG}'
     Replace FLAG with the value to which it is set by `@set FLAG'.
     *Note `@set' `@clear' `@value': set clear value.

`@var{METASYNTACTIC-VARIABLE}'
     Highlight a metasyntactic variable, which is something that stands
     for another piece of text.  *Note Indicating Metasyntactic
     Variables: var.

`@vindex ENTRY'
     Add ENTRY to the index of variables.  *Note Defining the Entries
     of an Index: Index Entries.

`@vskip AMOUNT'
     In a printed manual, insert whitespace so as to push text on the
     remainder of the page towards the bottom of the page.  Used in
     formatting the copyright page with the argument `0pt plus 1filll'.
     (Note spelling of `filll'.)  `@vskip' may be used only in
     contexts ignored for Info.  *Note The Copyright Page and Printed
     Permissions: Copyright & Permissions.

`@vtable FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry.
     Automatically enter each of the items in the first column into the
     index of variables.  Pair with `@end vtable'.  The same as
     `@table', except for indexing.  *Note `@ftable' and `@vtable':
     ftable vtable.

`@w{TEXT}'
     Prevent TEXT from being split across two lines.  Do not end a
     paragraph that uses `@w' with an `@refill' command.  *Note `@w': w.

`@xref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     Make a reference that starts with `See' in a printed manual.
     Follow command with a punctuation mark.  Only the first argument is
     mandatory.  *Note `@xref': xref.


File: texinfo.info,  Node: Tips,  Next: Sample Texinfo File,  Prev: Command List,  Up: Top

Appendix B Tips and Hints
*************************

Here are some tips for writing Texinfo documentation:

   * Write in the present tense, not in the past or the future.

   * Write actively!  For example, write "We recommend that ..." rather
     than "It is recommended that ...".

   * Use 70 or 72 as your fill column.  Longer lines are hard to read.

   * Include a copyright notice and copying permissions.

Index, Index, Index!
....................

Write many index entries, in different ways.  Readers like indices;
they are helpful and convenient.

  Although it is easiest to write index entries as you write the body of
the text, some people prefer to write entries afterwards.  In either
case, write an entry before the paragraph to which it applies.  This
way, an index entry points to the first page of a paragraph that is
split across pages.

  Here are more hints we have found valuable:

   * Write each index entry differently, so each entry refers to a
     different place in the document.

   * Write index entries only where a topic is discussed significantly.
     For example, it is not useful to index "debugging information" in
     a chapter on reporting bugs.  Someone who wants to know about
     debugging information will certainly not find it in that chapter.

   * Consistently capitalize the first word of every concept index
     entry, or else consistently use lower case.  Terse entries often
     call for lower case; longer entries for capitalization.  Whichever
     case convention you use, please use one or the other consistently!
     Mixing the two styles looks bad.

   * Always capitalize or use upper case for those words in an index for
     which this is proper, such as names of countries or acronyms.
     Always use the appropriate case for case-sensitive names, such as
     those in C or Lisp.

   * Write the indexing commands that refer to a whole section
     immediately after the section command, and write the indexing
     commands that refer to the paragraph before the paragraph.

     In the example that follows, a blank line comes after the index
     entry for "Leaping":

          @section The Dog and the Fox
          @cindex Jumping, in general
          @cindex Leaping

          @cindex Dog, lazy, jumped over
          @cindex Lazy dog jumped over
          @cindex Fox, jumps over dog
          @cindex Quick fox jumps over dog
          The quick brown fox jumps over the lazy dog.

     (Note that the example shows entries for the same concept that are
     written in different ways--`Lazy dog', and `Dog, lazy'--so readers
     can look up the concept in different ways.)

Blank Lines
...........

   * Insert a blank line between a sectioning command and the first
     following sentence or paragraph, or between the indexing commands
     associated with the sectioning command and the first following
     sentence or paragraph, as shown in the tip on indexing.
     Otherwise, a formatter may fold title and paragraph together.

   * Always insert a blank line before an `@table' command and after an
     `@end table' command; but never insert a blank line after an
     `@table' command or before an `@end table' command.

     For example,

          Types of fox:

          @table @samp
          @item Quick
          Jump over lazy dogs.

          @item Brown
          Also jump over lazy dogs.
          @end table
          @noindent
          On the other hand, ...

     Insert blank lines before and after `@itemize' ... `@end itemize'
     and `@enumerate' ... `@end enumerate' in the same way.

Complete Phrases
................

Complete phrases are easier to read than ...

   * Write entries in an itemized list as complete sentences; or at
     least, as complete phrases.  Incomplete expressions ... awkward
     ... like this.

   * Write the prefatory sentence or phrase for a multi-item list or
     table as a complete expression.  Do not write "You can set:";
     instead, write "You can set these variables:".  The former
     expression sounds cut off.

Editions, Dates and Versions
............................

Write the edition and version numbers and date in three places in every
manual:

  1. In the first `@ifinfo' section, for people reading the Texinfo
     file.

  2. In the `@titlepage' section, for people reading the printed manual.

  3. In the `Top' node, for people reading the Info file.

Also, it helps to write a note before the first `@ifinfo' section to
explain what you are doing.

For example:

     @c ===> NOTE! <==
     @c Specify the edition and version numbers and date
     @c in *three* places:
     @c   1. First ifinfo section  2. title page  3. top node
     @c To find the locations, search for !!set

     @ifinfo
     @c !!set edition, date, version
     This is Edition 4.03, January 1992,
     of the @cite{GDB Manual} for GDB Version 4.3.
     ...

--or use `@set' and `@value' (*note `@value' Example: value Example.).

Definition Commands
...................

Definition commands are `@deffn', `@defun', `@defmac', and the like,
and enable you to write descriptions in a uniform format.

   * Write just one definition command for each entity you define with a
     definition command.  The automatic indexing feature creates an
     index entry that leads the reader to the definition.

   * Use `@table' ... `@end table' in an appendix that contains a
     summary of functions, not `@deffn' or other definition commands.

Capitalization
..............

   * Capitalize "Texinfo"; it is a name.  Do not write the `x' or `i'
     in upper case.

   * Capitalize "Info"; it is a name.

   * Write TeX using the `@TeX{}' command.  Note the uppercase `T' and
     `X'.  This command causes the formatters to typeset the name
     according to the wishes of Donald Knuth, who wrote TeX.

Spaces
......

Do not use spaces to format a Texinfo file, except inside of `@example'
... `@end example' and similar commands.

  For example, TeX fills the following:

         @kbd{C-x v}
         @kbd{M-x vc-next-action}
            Perform the next logical operation
            on the version-controlled file
            corresponding to the current buffer.

so it looks like this:

     `C-x v' `M-x vc-next-action' Perform the next logical operation on
     the version-controlled file corresponding to the current buffer.

In this case, the text should be formatted with `@table', `@item', and
`@itemx', to create a table.

@code, @samp, @var, and `---'
.............................

   * Use `@code' around Lisp symbols, including command names.  For
     example,

          The main function is @code{vc-next-action}, ...

   * Avoid putting letters such as `s' immediately after an `@code'.
     Such letters look bad.

   * Use `@var' around meta-variables.  Do not write angle brackets
     around them.

   * Use three hyphens in a row, `---', to indicate a long dash.  TeX
     typesets these as a long dash and the Info formatters reduce three
     hyphens to two.

Periods Outside of Quotes
.........................

Place periods and other punctuation marks _outside_ of quotations,
unless the punctuation is part of the quotation.  This practice goes
against publishing conventions in the United States, but enables the
reader to distinguish between the contents of the quotation and the
whole passage.

  For example, you should write the following sentence with the period
outside the end quotation marks:

     Evidently, `au' is an abbreviation for ``author''.

since `au' does _not_ serve as an abbreviation for `author.' (with a
period following the word).

Introducing New Terms
.....................

   * Introduce new terms so that a reader who does not know them can
     understand them from context; or write a definition for the term.

     For example, in the following, the terms "check in", "register" and
     "delta" are all appearing for the first time; the example sentence
     should be rewritten so they are understandable.

          The major function assists you in checking in a file to your
          version control system and registering successive sets of
          changes to it as deltas.

   * Use the `@dfn' command around a word being introduced, to indicate
     that the reader should not expect to know the meaning already, and
     should expect to learn the meaning from this passage.

@pxref
......

Absolutely never use `@pxref' except in the special context for which
it is designed: inside parentheses, with the closing parenthesis
following immediately after the closing brace.  One formatter
automatically inserts closing punctuation and the other does not.  This
means that the output looks right both in printed output and in an Info
file, but only when the command is used inside parentheses.

Invoking from a Shell
.....................

You can invoke programs such as Emacs, GCC, and `gawk' from a shell.
The documentation for each program should contain a section that
describes this.  Unfortunately, if the node names and titles for these
sections are all different, readers find it hard to search for the
section.

  Name such sections with a phrase beginning with the word
`Invoking ...', as in `Invoking Emacs'; this way users can find the
section easily.

ANSI C Syntax
.............

When you use `@example' to describe a C function's calling conventions,
use the ANSI C syntax, like this:

     void dld_init (char *@var{path});

And in the subsequent discussion, refer to the argument values by
writing the same argument names, again highlighted with `@var'.

  Avoid the obsolete style that looks like this:

     #include <dld.h>

     dld_init (path)
     char *path;

  Also, it is best to avoid writing `#include' above the declaration
just to indicate that the function is declared in a header file.  The
practice may give the misimpression that the `#include' belongs near
the declaration of the function.  Either state explicitly which header
file holds the declaration or, better yet, name the header file used
for a group of functions at the beginning of the section that describes
the functions.

Bad Examples
............

Here are several examples of bad writing to avoid:

  In this example, say, " ... you must `@dfn'{check in} the new
version."  That flows better.

     When you are done editing the file, you must perform a
     `@dfn'{check in}.

  In the following example, say, "... makes a unified interface such as
VC mode possible."

     SCCS, RCS and other version-control systems all perform similar
     functions in broadly similar ways (it is this resemblance which
     makes a unified control mode like this possible).

  And in this example, you should specify what `it' refers to:

     If you are working with other people, it assists in coordinating
     everyone's changes so they do not step on each other.

And Finally ...
...............

   * Pronounce TeX as if the `X' were a Greek `chi', as the last sound
     in the name `Bach'.  But pronounce Texinfo as in `speck':
     "teckinfo".

   * Write notes for yourself at the very end of a Texinfo file after
     the `@bye'.  None of the formatters process text after the `@bye';
     it is as if the text were within `@ignore' ...  `@end ignore'.


File: texinfo.info,  Node: Sample Texinfo File,  Next: Sample Permissions,  Prev: Tips,  Up: Top

Appendix C A Sample Texinfo File
********************************

Here is a complete, short sample Texinfo file, without any commentary.
You can see this file, with comments, in the first chapter.  *Note A
Short Sample Texinfo File: Short Sample.


     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Document
     @c %**end of header

     @setchapternewpage odd

     @ifinfo
     This is a short example of a complete Texinfo file.

     Copyright 1990 Free Software Foundation, Inc.
     @end ifinfo

     @titlepage
     @sp 10
     @comment The title is printed in a large font.
     @center @titlefont{Sample Title}

     @c The following two commands start the copyright page.
     @page
     @vskip 0pt plus 1filll
     Copyright @copyright{} 1990 Free Software Foundation, Inc.
     @end titlepage

     @node    Top,       First Chapter,         , (dir)
     @comment node-name, next,          previous, up

     @menu
     * First Chapter::    The first chapter is the
                          only chapter in this sample.
     * Concept Index::    This index has two entries.
     @end menu

     @node    First Chapter, Concept Index, Top,      Top
     @comment node-name,     next,          previous, up
     @chapter First Chapter
     @cindex Sample index entry

     This is the contents of the first chapter.
     @cindex Another sample index entry

     Here is a numbered list.

     @enumerate
     @item
     This is the first item.

     @item
     This is the second item.
     @end enumerate

     The @code{makeinfo} and @code{texinfo-format-buffer}
     commands transform a Texinfo file such as this into
     an Info file; and @TeX{} typesets it for a printed
     manual.

     @node    Concept Index,    ,  First Chapter, Top
     @comment node-name,    next,  previous,      up
     @unnumbered Concept Index

     @printindex cp

     @contents
     @bye


File: texinfo.info,  Node: Sample Permissions,  Next: Include Files,  Prev: Sample Texinfo File,  Up: Top

Appendix D Sample Permissions
*****************************

Texinfo files should contain sections that tell the readers that they
have the right to copy and distribute the Texinfo file, the Info file,
and the printed manual.

  Also, if you are writing a manual about software, you should explain
that the software is free and either include the GNU General Public
License (GPL) or provide a reference to it.  *Note Distribution:
(xemacs)Distrib, for an example of the text that could be used in the
software "Distribution", "General Public License", and "NO WARRANTY"
sections of a document.  *Note Texinfo Copying Conditions: Copying, for
an example of a brief explanation of how the copying conditions provide
you with rights.

* Menu:

* Inserting Permissions::       How to put permissions in your document.
* ifinfo Permissions::          Sample `ifinfo' copying permissions.
* Titlepage Permissions::       Sample Titlepage copying permissions.


File: texinfo.info,  Node: Inserting Permissions,  Next: ifinfo Permissions,  Prev: Sample Permissions,  Up: Sample Permissions

D.1 Inserting Permissions
=========================

  In a Texinfo file, the first `@ifinfo' section usually begins with a
line that says what the file documents.  This is what a person reading
the unprocessed Texinfo file or using the advanced Info command `g *'
sees first.  *note Advanced Info commands: (info)Expert, for more
information. (A reader using the regular Info commands usually starts
reading at the first node and skips this first section, which is not in
a node.)

  In the `@ifinfo' section, the summary sentence is followed by a
copyright notice and then by the copying permission notice.  One of the
copying permission paragraphs is enclosed in `@ignore' and `@end
ignore' commands.  This paragraph states that the Texinfo file can be
processed through TeX and printed, provided the printed manual carries
the proper copying permission notice.  This paragraph is not made part
of the Info file since it is not relevant to the Info file; but it is a
mandatory part of the Texinfo file since it permits people to process
the Texinfo file in TeX and print the results.

  In the printed manual, the Free Software Foundation copying permission
notice follows the copyright notice and publishing information and is
located within the region delineated by the `@titlepage' and `@end
titlepage' commands.  The copying permission notice is exactly the same
as the notice in the `@ifinfo' section except that the paragraph
enclosed in `@ignore' and `@end ignore' commands is not part of the
notice.

  To make it simple to insert a permission notice into each section of
the Texinfo file, sample permission notices for each section are
reproduced in full below.

  Note that you may need to specify the correct name of a section
mentioned in the permission notice.  For example, in `The GDB Manual',
the name of the section referring to the General Public License is
called the "GDB General Public License", but in the sample shown below,
that section is referred to generically as the "GNU General Public
License".  If the Texinfo file does not carry a copy of the General
Public License, leave out the reference to it, but be sure to include
the rest of the sentence.


File: texinfo.info,  Node: ifinfo Permissions,  Next: Titlepage Permissions,  Prev: Inserting Permissions,  Up: Sample Permissions

D.2 `ifinfo' Copying Permissions
================================

In the `@ifinfo' section of a Texinfo file, the standard Free Software
Foundation permission notice reads as follows:

     This file documents ...

     Copyright 1998 Free Software Foundation, Inc.

     Permission is granted to make and distribute verbatim
     copies of this manual provided the copyright notice and
     this permission notice are preserved on all copies.

     @ignore
     Permission is granted to process this file through TeX
     and print the results, provided the printed document
     carries a copying permission notice identical to this
     one except for the removal of this paragraph (this
     paragraph not being relevant to the printed manual).

     @end ignore
     Permission is granted to copy and distribute modified
     versions of this manual under the conditions for
     verbatim copying, provided also that the sections
     entitled ``Copying'' and ``GNU General Public License''
     are included exactly as in the original, and provided
     that the entire resulting derived work is distributed
     under the terms of a permission notice identical to this
     one.

     Permission is granted to copy and distribute
     translations of this manual into another language,
     under the above conditions for modified versions,
     except that this permission notice may be stated in a
     translation approved by the Free Software Foundation.


File: texinfo.info,  Node: Titlepage Permissions,  Prev: ifinfo Permissions,  Up: Sample Permissions

D.3 Titlepage Copying Permissions
=================================

In the `@titlepage' section of a Texinfo file, the standard Free
Software Foundation copying permission notice follows the copyright
notice and publishing information.  The standard phrasing is as follows:

     Permission is granted to make and distribute verbatim
     copies of this manual provided the copyright notice and
     this permission notice are preserved on all copies.

     Permission is granted to copy and distribute modified
     versions of this manual under the conditions for
     verbatim copying, provided also that the sections
     entitled ``Copying'' and ``GNU General Public License''
     are included exactly as in the original, and provided
     that the entire resulting derived work is distributed
     under the terms of a permission notice identical to this
     one.

     Permission is granted to copy and distribute
     translations of this manual into another language,
     under the above conditions for modified versions,
     except that this permission notice may be stated in a
     translation approved by the Free Software Foundation.


File: texinfo.info,  Node: Include Files,  Next: Headings,  Prev: Sample Permissions,  Up: Top

Appendix E Include Files
************************

When TeX or an Info formatting command sees an `@include' command in a
Texinfo file, it processes the contents of the file named by the
command and incorporates them into the DVI or Info file being created.
Index entries from the included file are incorporated into the indices
of the output file.

  Include files let you keep a single large document as a collection of
conveniently small parts.

* Menu:

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                  menus when using included files.
* Include File Requirements::   What `texinfo-multiple-files-update' expects.
* Sample Include File::         A sample outer file with included files
                                  within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                  has changed over time.


File: texinfo.info,  Node: Using Include Files,  Next: texinfo-multiple-files-update,  Prev: Include Files,  Up: Include Files

E.1 How to Use Include Files
============================

To include another file within a Texinfo file, write the `@include'
command at the beginning of a line and follow it on the same line by
the name of a file to be included.  For example:

     @include buffers.texi

  An included file should simply be a segment of text that you expect to
be included as is into the overall or "outer" Texinfo file; it should
not contain the standard beginning and end parts of a Texinfo file.  In
particular, you should not start an included file with a line saying
`\input texinfo'; if you do, that phrase is inserted into the output
file as is.  Likewise, you should not end an included file with an
`@bye' command; nothing after `@bye' is formatted.

  In the past, you were required to write an `@setfilename' line at the
beginning of an included file, but no longer.  Now, it does not matter
whether you write such a line.  If an `@setfilename' line exists in an
included file, it is ignored.

  Conventionally, an included file begins with an `@node' line that is
followed by an `@chapter' line.  Each included file is one chapter.
This makes it easy to use the regular node and menu creating and
updating commands to create the node pointers and menus within the
included file.  However, the simple Emacs node and menu creating and
updating commands do not work with multiple Texinfo files.  Thus you
cannot use these commands to fill in the `Next', `Previous', and `Up'
pointers of the `@node' line that begins the included file.  Also, you
cannot use the regular commands to create a master menu for the whole
file.  Either you must insert the menus and the `Next', `Previous', and
`Up' pointers by hand, or you must use the GNU Emacs Texinfo mode
command, `texinfo-multiple-files-update', that is designed for
`@include' files.


File: texinfo.info,  Node: texinfo-multiple-files-update,  Next: Include File Requirements,  Prev: Using Include Files,  Up: Include Files

E.2 `texinfo-multiple-files-update'
===================================

GNU Emacs Texinfo mode provides the `texinfo-multiple-files-update'
command.  This command creates or updates `Next', `Previous', and `Up'
pointers of included files as well as those in the outer or overall
Texinfo file, and it creates or updates a main menu in the outer file.
Depending whether you call it with optional arguments, the command
updates only the pointers in the first `@node' line of the included
files or all of them:

`M-x texinfo-multiple-files-update'
     Called without any arguments:

        - Create or update the `Next', `Previous', and `Up' pointers of
          the first `@node' line in each file included in an outer or
          overall Texinfo file.

        - Create or update the `Top' level node pointers of the outer or
          overall file.

        - Create or update a main menu in the outer file.

`C-u M-x texinfo-multiple-files-update'
     Called with `C-u' as a prefix argument:

        - Create or update pointers in the first `@node' line in each
          included file.

        - Create or update the `Top' level node pointers of the outer
          file.

        - Create and insert a master menu in the outer file.  The
          master menu is made from all the menus in all the included
          files.

`C-u 8 M-x texinfo-multiple-files-update'
     Called with a numeric prefix argument, such as `C-u 8':

        - Create or update *all* the `Next', `Previous', and `Up'
          pointers of all the included files.

        - Create or update *all* the menus of all the included files.

        - Create or update the `Top' level node pointers of the outer or
          overall file.

        - And then create a master menu in the outer file.  This is
          similar to invoking `texinfo-master-menu' with an argument
          when you are working with just one file.

  Note the use of the prefix argument in interactive use: with a regular
prefix argument, just `C-u', the `texinfo-multiple-files-update'
command inserts a master menu; with a numeric prefix argument, such as
`C-u 8', the command updates *every* pointer and menu in *all* the
files and then inserts a master menu.


File: texinfo.info,  Node: Include File Requirements,  Next: Sample Include File,  Prev: texinfo-multiple-files-update,  Up: Include Files

E.3 Include File Requirements
=============================

If you plan to use the `texinfo-multiple-files-update' command, the
outer Texinfo file that lists included files within it should contain
nothing but the beginning and end parts of a Texinfo file, and a number
of `@include' commands listing the included files.  It should not even
include indices, which should be listed in an included file of their
own.

  Moreover, each of the included files must contain exactly one highest
level node (conventionally, `@chapter' or equivalent), and this node
must be the first node in the included file.  Furthermore, each of
these highest level nodes in each included file must be at the same
hierarchical level in the file structure.  Usually, each is an
`@chapter', an `@appendix', or an `@unnumbered' node.  Thus, normally,
each included file contains one, and only one, chapter or
equivalent-level node.

  The outer file should contain only _one_ node, the `Top' node.  It
should _not_ contain any nodes besides the single `Top' node.  The
`texinfo-multiple-files-update' command will not process them.


File: texinfo.info,  Node: Sample Include File,  Next: Include Files Evolution,  Prev: Include File Requirements,  Up: Include Files

E.4 Sample File with `@include'
===============================

Here is an example of a complete outer Texinfo file with `@include'
files within it before running `texinfo-multiple-files-update', which
would insert a main or master menu:

     \input texinfo @c -*-texinfo-*-
     @setfilename  include-example.info
     @settitle Include Example

     @setchapternewpage odd
     @titlepage
     @sp 12
     @center @titlefont{Include Example}
     @sp 2
     @center by Whom Ever

     @page
     @vskip 0pt plus 1filll
     Copyright @copyright{} 1998 Free Software Foundation, Inc.
     @end titlepage

     @ifinfo
     @node Top, First, , (dir)
     @top Master Menu
     @end ifinfo

     @include foo.texinfo
     @include bar.texinfo
     @include concept-index.texinfo

     @summarycontents
     @contents

     @bye

  An included file, such as `foo.texinfo', might look like this:

     @node First, Second, , Top
     @chapter First Chapter

     Contents of first chapter ...

  The full contents of `concept-index.texinfo' might be as simple as
this:

     @node Concept Index, , Second, Top
     @unnumbered Concept Index

     @printindex cp

  The outer Texinfo source file for `The XEmacs Lisp Reference Manual'
is named `elisp.texi'.  This outer file contains a master menu with 417
entries and a list of 41 `@include' files.


File: texinfo.info,  Node: Include Files Evolution,  Prev: Sample Include File,  Up: Include Files

E.5 Evolution of Include Files
==============================

When Info was first created, it was customary to create many small Info
files on one subject.  Each Info file was formatted from its own
Texinfo source file.  This custom meant that Emacs did not need to make
a large buffer to hold the whole of a large Info file when someone
wanted information; instead, Emacs allocated just enough memory for the
small Info file that contained the particular information sought.  This
way, Emacs could avoid wasting memory.

  References from one file to another were made by referring to the file
name as well as the node name. (*Note Referring to Other Info Files:
Other Info Files.  Also, see *Note `@xref' with Four and Five
Arguments: Four and Five Arguments.)

  Include files were designed primarily as a way to create a single,
large printed manual out of several smaller Info files.  In a printed
manual, all the references were within the same document, so TeX could
automatically determine the references' page numbers.  The Info
formatting commands used include files only for creating joint indices;
each of the individual Texinfo files had to be formatted for Info
individually.  (Each, therefore, required its own `@setfilename' line.)

  However, because large Info files are now split automatically, it is
no longer necessary to keep them small.

  Nowadays, multiple Texinfo files are used mostly for large documents,
such as `The XEmacs Lisp Reference Manual', and for projects in which
several different people write different sections of a document
simultaneously.

  In addition, the Info formatting commands have been extended to work
with the `@include' command so as to create a single large Info file
that is split into smaller files if necessary.  This means that you can
write menus and cross references without naming the different Texinfo
files.


File: texinfo.info,  Node: Headings,  Next: Catching Mistakes,  Prev: Include Files,  Up: Top

Appendix F Page Headings
************************

Most printed manuals contain headings along the top of every page
except the title and copyright pages.  Some manuals also contain
footings.  (Headings and footings have no meaning to Info, which is not
paginated.)

* Menu:

* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.


File: texinfo.info,  Node: Headings Introduced,  Next: Heading Format,  Prev: Headings,  Up: Headings

Headings Introduced
===================

  Texinfo provides standard page heading formats for manuals that are
printed on one side of each sheet of paper and for manuals that are
printed on both sides of the paper.  Typically, you will use these
formats, but you can specify your own format if you wish.

  In addition, you can specify whether chapters should begin on a new
page, or merely continue the same page as the previous chapter; and if
chapters begin on new pages, you can specify whether they must be
odd-numbered pages.

  By convention, a book is printed on both sides of each sheet of paper.
When you open a book, the right-hand page is odd-numbered, and chapters
begin on right-hand pages--a preceding left-hand page is left blank if
necessary.  Reports, however, are often printed on just one side of
paper, and chapters begin on a fresh page immediately following the end
of the preceding chapter.  In short or informal reports, chapters often
do not begin on a new page at all, but are separated from the preceding
text by a small amount of whitespace.

  The `@setchapternewpage' command controls whether chapters begin on
new pages, and whether one of the standard heading formats is used.  In
addition, Texinfo has several heading and footing commands that you can
use to generate your own heading and footing formats.

  In Texinfo, headings and footings are single lines at the tops and
bottoms of pages; you cannot create multiline headings or footings.
Each header or footer line is divided into three parts: a left part, a
middle part, and a right part.  Any part, or a whole line, may be left
blank.  Text for the left part of a header or footer line is set
flushleft; text for the middle part is centered; and, text for the
right part is set flushright.


File: texinfo.info,  Node: Heading Format,  Next: Heading Choice,  Prev: Headings Introduced,  Up: Headings

F.1 Standard Heading Formats
============================

Texinfo provides two standard heading formats, one for manuals printed
on one side of each sheet of paper, and the other for manuals printed
on both sides of the paper.

  By default, nothing is specified for the footing of a Texinfo file,
so the footing remains blank.

  The standard format for single-sided printing consists of a header
line in which the left-hand part contains the name of the chapter, the
central part is blank, and the right-hand part contains the page number.

  A single-sided page looks like this:

        _______________________
       |                       |
       | chapter   page number |
       |                       |
       | Start of text ...     |
       | ...                   |
       |                       |

  The standard format for two-sided printing depends on whether the page
number is even or odd.  By convention, even-numbered pages are on the
left- and odd-numbered pages are on the right.  (TeX will adjust the
widths of the left- and right-hand margins.  Usually, widths are
correct, but during double-sided printing, it is wise to check that
pages will bind properly--sometimes a printer will produce output in
which the even-numbered pages have a larger right-hand margin than the
odd-numbered pages.)

  In the standard double-sided format, the left part of the left-hand
(even-numbered) page contains the page number, the central part is
blank, and the right part contains the title (specified by the
`@settitle' command).  The left part of the right-hand (odd-numbered)
page contains the name of the chapter, the central part is blank, and
the right part contains the page number.

  Two pages, side by side as in an open book, look like this:

        _______________________     _______________________
       |                       |   |                       |
       | page number     title |   | chapter   page number |
       |                       |   |                       |
       | Start of text ...     |   | More  text ...        |
       | ...                   |   | ...                   |
       |                       |   |                       |

The chapter name is preceded by the word "Chapter", the chapter number
and a colon.  This makes it easier to keep track of where you are in the
manual.


File: texinfo.info,  Node: Heading Choice,  Next: Custom Headings,  Prev: Heading Format,  Up: Headings

F.2 Specifying the Type of Heading
==================================

TeX does not begin to generate page headings for a standard Texinfo
file until it reaches the `@end titlepage' command.  Thus, the title
and copyright pages are not numbered.  The `@end titlepage' command
causes TeX to begin to generate page headings according to a standard
format specified by the `@setchapternewpage' command that precedes the
`@titlepage' section.

  There are four possibilities:

No `@setchapternewpage' command
     Cause TeX to specify the single-sided heading format, with chapters
     on new pages. This is the same as `@setchapternewpage on'.

`@setchapternewpage on'
     Specify the single-sided heading format, with chapters on new
     pages.

`@setchapternewpage off'
     Cause TeX to start a new chapter on the same page as the last page
     of the preceding chapter, after skipping some vertical whitespace.
     Also cause TeX to typeset for single-sided printing.  (You can
     override the headers format with the `@headings double' command;
     see *Note The `@headings' Command: headings on off.)

`@setchapternewpage odd'
     Specify the double-sided heading format, with chapters on new
     pages.

Texinfo lacks an `@setchapternewpage even' command.


File: texinfo.info,  Node: Custom Headings,  Prev: Heading Choice,  Up: Headings

F.3 How to Make Your Own Headings
=================================

You can use the standard headings provided with Texinfo or specify your
own.  By default, Texinfo has no footers, so if you specify them, the
available page size for the main text will be slightly reduced.

  Texinfo provides six commands for specifying headings and footings.
The `@everyheading' command and `@everyfooting' command generate page
headers and footers that are the same for both even- and odd-numbered
pages.  The `@evenheading' command and `@evenfooting' command generate
headers and footers for even-numbered (left-hand) pages; and the
`@oddheading' command and `@oddfooting' command generate headers and
footers for odd-numbered (right-hand) pages.

  Write custom heading specifications in the Texinfo file immediately
after the `@end titlepage' command.  Enclose your specifications
between `@iftex' and `@end iftex' commands since the
`texinfo-format-buffer' command may not recognize them.  Also, you must
cancel the predefined heading commands with the `@headings off' command
before defining your own specifications.

  Here is how to tell TeX to place the chapter name at the left, the
page number in the center, and the date at the right of every header
for both even- and odd-numbered pages:

     @iftex
     @headings off
     @everyheading @thischapter @| @thispage @| @today{}
     @end iftex

You need to divide the left part from the central part and the central
part from the right part by inserting `@|' between parts.  Otherwise,
the specification command will not be able to tell where the text for
one part ends and the next part begins.

  Each part can contain text or @-commands.  The text is printed as if
the part were within an ordinary paragraph in the body of the page.
The @-commands replace themselves with the page number, date, chapter
name, or whatever.

  Here are the six heading and footing commands:

`@everyheading LEFT @| CENTER @| RIGHT'
`@everyfooting LEFT @| CENTER @| RIGHT'
     The `every' commands specify the format for both even- and
     odd-numbered pages.  These commands are for documents that are
     printed on one side of each sheet of paper, or for documents in
     which you want symmetrical headers or footers.

`@evenheading LEFT @| CENTER @| RIGHT'
`@oddheading  LEFT @| CENTER @| RIGHT'
`@evenfooting LEFT @| CENTER @| RIGHT'
`@oddfooting  LEFT @| CENTER @| RIGHT'
     The `even' and `odd' commands specify the format for even-numbered
     pages and odd-numbered pages.  These commands are for books and
     manuals that are printed on both sides of each sheet of paper.

  Use the `@this...' series of @-commands to provide the names of
chapters and sections and the page number.  You can use the `@this...'
commands in the left, center, or right portions of headers and footers,
or anywhere else in a Texinfo file so long as they are between `@iftex'
and `@end iftex' commands.

  Here are the `@this...' commands:

`@thispage'
     Expands to the current page number.

`@thischaptername'
     Expands to the name of the current chapter.

`@thischapter'
     Expands to the number and name of the current chapter, in the
     format `Chapter 1: Title'.

`@thistitle'
     Expands to the name of the document, as specified by the
     `@settitle' command.

`@thisfile'
     For `@include' files only: expands to the name of the current
     `@include' file.  If the current Texinfo source file is not an
     `@include' file, this command has no effect.  This command does
     _not_ provide the name of the current Texinfo source file unless
     it is an `@include' file.  (*Note Include Files::, for more
     information about `@include' files.)

You can also use the `@today{}' command, which expands to the current
date, in `1 Jan 1900' format.  

  Other @-commands and text are printed in a header or footer just as
if they were in the body of a page.  It is useful to incorporate text,
particularly when you are writing drafts:

     @iftex
     @headings off
     @everyheading @emph{Draft!} @| @thispage @| @thischapter
     @everyfooting @| @| Version: 0.27: @today{}
     @end iftex

  Beware of overlong titles: they may overlap another part of the
header or footer and blot it out.


File: texinfo.info,  Node: Catching Mistakes,  Next: Refilling Paragraphs,  Prev: Headings,  Up: Top

Appendix G Formatting Mistakes
******************************

Besides mistakes in the content of your documentation, there are two
kinds of mistake you can make with Texinfo:  you can make mistakes with
@-commands, and you can make mistakes with the structure of the nodes
and chapters.

  Emacs has two tools for catching the @-command mistakes and two for
catching structuring mistakes.

  For finding problems with @-commands, you can run TeX or a region
formatting command on the region that has a problem; indeed, you can
run these commands on each region as you write it.

  For finding problems with the structure of nodes and chapters, you
can use `C-c C-s' (`texinfo-show-structure') and the related `occur'
command and you can use the `M-x Info-validate' command.

* Menu:

* makeinfo Preferred::          `makeinfo' finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with TeX formatting.
* Using texinfo-show-structure::  How to use `texinfo-show-structure'.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.


File: texinfo.info,  Node: makeinfo Preferred,  Next: Debugging with Info,  Prev: Catching Mistakes,  Up: Catching Mistakes

`makeinfo' Find Errors
======================

  The `makeinfo' program does an excellent job of catching errors and
reporting them--far better than `texinfo-format-region' or
`texinfo-format-buffer'.  In addition, the various functions for
automatically creating and updating node pointers and menus remove many
opportunities for human error.

  If you can, use the updating commands to create and insert pointers
and menus.  These prevent many errors.  Then use `makeinfo' (or its
Texinfo mode manifestations, `makeinfo-region' and `makeinfo-buffer')
to format your file and check for other errors.  This is the best way
to work with Texinfo.  But if you cannot use `makeinfo', or your
problem is very puzzling, then you may want to use the tools described
in this appendix.


File: texinfo.info,  Node: Debugging with Info,  Next: Debugging with TeX,  Prev: makeinfo Preferred,  Up: Catching Mistakes

G.1 Catching Errors with Info Formatting
========================================

After you have written part of a Texinfo file, you can use the
`texinfo-format-region' or the `makeinfo-region' command to see whether
the region formats properly.

  Most likely, however, you are reading this section because for some
reason you cannot use the `makeinfo-region' command; therefore, the
rest of this section presumes that you are using
`texinfo-format-region'.

  If you have made a mistake with an @-command, `texinfo-format-region'
will stop processing at or after the error and display an error
message.  To see where in the buffer the error occurred, switch to the
`*Info Region*' buffer; the cursor will be in a position that is after
the location of the error.  Also, the text will not be formatted after
the place where the error occurred (or more precisely, where it was
detected).

  For example, if you accidentally end a menu with the command `@end
menus' with an `s' on the end, instead of with `@end menu', you will
see an error message that says:

     @end menus is not handled by texinfo

The cursor will stop at the point in the buffer where the error occurs,
or not long after it.  The buffer will look like this:

     ---------- Buffer: *Info Region* ----------
     * Menu:

     * Using texinfo-show-structure::  How to use
                                       `texinfo-show-structure'
                                       to catch mistakes.
     * Running Info-Validate::         How to check for
                                       unreferenced nodes.
     @end menus
     -!-
     ---------- Buffer: *Info Region* ----------

  The `texinfo-format-region' command sometimes provides slightly odd
error messages.  For example, the following cross reference fails to
format:

     (@xref{Catching Mistakes, for more info.)

In this case, `texinfo-format-region' detects the missing closing brace
but displays a message that says `Unbalanced parentheses' rather than
`Unbalanced braces'.  This is because the formatting command looks for
mismatches between braces as if they were parentheses.

  Sometimes `texinfo-format-region' fails to detect mistakes.  For
example, in the following, the closing brace is swapped with the
closing parenthesis:

     (@xref{Catching Mistakes), for more info.}

Formatting produces:
     (*Note for more info.: Catching Mistakes)

  The only way for you to detect this error is to realize that the
reference should have looked like this:

     (*Note Catching Mistakes::, for more info.)

  Incidentally, if you are reading this node in Info and type `f <RET>'
(`Info-follow-reference'), you will generate an error message that says:

     No such node: "Catching Mistakes) The only way ...

This is because Info perceives the example of the error as the first
cross reference in this node and if you type a <RET> immediately after
typing the Info `f' command, Info will attempt to go to the referenced
node.  If you type `f catch <TAB> <RET>', Info will complete the node
name of the correctly written example and take you to the `Catching
Mistakes' node.  (If you try this, you can return from the `Catching
Mistakes' node by typing `l' (`Info-last').)


File: texinfo.info,  Node: Debugging with TeX,  Next: Using texinfo-show-structure,  Prev: Debugging with Info,  Up: Catching Mistakes

G.2 Catching Errors with TeX Formatting
=======================================

You can also catch mistakes when you format a file with TeX.

  Usually, you will want to do this after you have run
`texinfo-format-buffer' (or, better, `makeinfo-buffer') on the same
file, because `texinfo-format-buffer' sometimes displays error messages
that make more sense than TeX.  (*Note Debugging with Info::, for more
information.)

  For example, TeX was run on a Texinfo file, part of which is shown
here:

     ---------- Buffer: texinfo.texi ----------
     name of the Texinfo file as an extension.  The
     @samp{??} are `wildcards' that cause the shell to
     substitute all the raw index files.  (@xref{sorting
     indices, for more information about sorting
     indices.)@refill
     ---------- Buffer: texinfo.texi ----------

(The cross reference lacks a closing brace.)  TeX produced the
following output, after which it stopped:

     ---------- Buffer: *tex-shell* ----------
     Runaway argument?
     {sorting indices, for more information about sorting
     indices.) @refill @ETC.
     ! Paragraph ended before @xref was complete.
     <to be read again>
                        @par
     l.27

     ?
     ---------- Buffer: *tex-shell* ----------

  In this case, TeX produced an accurate and understandable error
message:

     Paragraph ended before @xref was complete.

`@par' is an internal TeX command of no relevance to Texinfo.  `l.27'
means that TeX detected the problem on line 27 of the Texinfo file.
The `?' is the prompt TeX uses in this circumstance.

  Unfortunately, TeX is not always so helpful, and sometimes you must
truly be a Sherlock Holmes to discover what went wrong.

  In any case, if you run into a problem like this, you can do one of
three things.

  1. You can tell TeX to continue running and ignore just this error by
     typing <RET> at the `?' prompt.

  2. You can tell TeX to continue running and to ignore all errors as
     best it can by typing `r <RET>' at the `?' prompt.

     This is often the best thing to do.  However, beware: the one error
     may produce a cascade of additional error messages as its
     consequences are felt through the rest of the file.  To stop TeX
     when it is producing such an avalanche of error messages, type
     `C-c' (or `C-c C-c', if you are running a shell inside Emacs).

  3. You can tell TeX to stop this run by typing `x <RET>' at the `?'
     prompt.

  Please note that if you are running TeX inside Emacs, you need to
switch to the shell buffer and line at which TeX offers the `?' prompt.

  Sometimes TeX will format a file without producing error messages even
though there is a problem.  This usually occurs if a command is not
ended but TeX is able to continue processing anyhow.  For example, if
you fail to end an itemized list with the `@end itemize' command, TeX
will write a DVI file that you can print out.  The only error message
that TeX will give you is the somewhat mysterious comment that

     (@end occurred inside a group at level 1)

However, if you print the DVI file, you will find that the text of the
file that follows the itemized list is entirely indented as if it were
part of the last item in the itemized list.  The error message is the
way TeX says that it expected to find an `@end' command somewhere in
the file; but that it could not determine where it was needed.

  Another source of notoriously hard-to-find errors is a missing `@end
group' command.  If you ever are stumped by incomprehensible errors,
look for a missing `@end group' command first.

  If the Texinfo file lacks header lines, TeX may stop in the beginning
of its run and display output that looks like the following.  The `*'
indicates that TeX is waiting for input.

     This is TeX, Version 3.14159 (Web2c 7.0)
     (test.texinfo [1])
     *

In this case, simply type `\end <RET>' after the asterisk.  Then write
the header lines in the Texinfo file and run the TeX command again.
(Note the use of the backslash, `\'.  TeX uses `\' instead of `@'; and
in this circumstance, you are working directly with TeX, not with
Texinfo.)


File: texinfo.info,  Node: Using texinfo-show-structure,  Next: Using occur,  Prev: Debugging with TeX,  Up: Catching Mistakes

G.3 Using `texinfo-show-structure'
==================================

It is not always easy to keep track of the nodes, chapters, sections,
and subsections of a Texinfo file.  This is especially true if you are
revising or adding to a Texinfo file that someone else has written.

  In GNU Emacs, in Texinfo mode, the `texinfo-show-structure' command
lists all the lines that begin with the @-commands that specify the
structure: `@chapter', `@section', `@appendix', and so on.  With an
argument (`C-u' as prefix argument, if interactive), the command also
shows the `@node' lines.  The `texinfo-show-structure' command is bound
to `C-c C-s' in Texinfo mode, by default.

  The lines are displayed in a buffer called the `*Occur*' buffer,
indented by hierarchical level.  For example, here is a part of what was
produced by running `texinfo-show-structure' on this manual:

      Lines matching "^@\\(chapter \\|sect\\|subs\\|subh\\|
      unnum\\|major\\|chapheading \\|heading \\|appendix\\)"
      in buffer texinfo.texi.
      ...
      4177:@chapter Nodes
      4198:    @heading Two Paths
      4231:    @section Node and Menu Illustration
      4337:    @section The @code{@@node} Command
      4393:        @subheading Choosing Node and Pointer Names
      4417:        @subsection How to Write an @code{@@node} Line
      4469:        @subsection @code{@@node} Line Tips
      ...

  This says that lines 4337, 4393, and 4417 of `texinfo.texi' begin
with the `@section', `@subheading', and `@subsection' commands
respectively.  If you move your cursor into the `*Occur*' window, you
can position the cursor over one of the lines and use the `C-c C-c'
command (`occur-mode-goto-occurrence'), to jump to the corresponding
spot in the Texinfo file.  *Note Using Occur: (xemacs)Other Repeating
Search, for more information about `occur-mode-goto-occurrence'.

  The first line in the `*Occur*' window describes the "regular
expression" specified by TEXINFO-HEADING-PATTERN.  This regular
expression is the pattern that `texinfo-show-structure' looks for.
*Note Using Regular Expressions: (xemacs)Regexps, for more information.

  When you invoke the `texinfo-show-structure' command, Emacs will
display the structure of the whole buffer.  If you want to see the
structure of just a part of the buffer, of one chapter, for example,
use the `C-x n n' (`narrow-to-region') command to mark the region.
(*Note Narrowing: (xemacs)Narrowing.)  This is how the example used
above was generated.  (To see the whole buffer again, use `C-x n w'
(`widen').)

  If you call `texinfo-show-structure' with a prefix argument by typing
`C-u C-c C-s', it will list lines beginning with `@node' as well as the
lines beginning with the @-sign commands for `@chapter', `@section',
and the like.

  You can remind yourself of the structure of a Texinfo file by looking
at the list in the `*Occur*' window; and if you have mis-named a node
or left out a section, you can correct the mistake.


File: texinfo.info,  Node: Using occur,  Next: Running Info-Validate,  Prev: Using texinfo-show-structure,  Up: Catching Mistakes

G.4 Using `occur'
=================

Sometimes the `texinfo-show-structure' command produces too much
information.  Perhaps you want to remind yourself of the overall
structure of a Texinfo file, and are overwhelmed by the detailed list
produced by `texinfo-show-structure'.  In this case, you can use the
`occur' command directly.  To do this, type

     M-x occur

and then, when prompted, type a "regexp", a regular expression for the
pattern you want to match.  (*Note Regular Expressions:
(xemacs)Regexps.)  The `occur' command works from the current location
of the cursor in the buffer to the end of the buffer.  If you want to
run `occur' on the whole buffer, place the cursor at the beginning of
the buffer.

  For example, to see all the lines that contain the word `@chapter' in
them, just type `@chapter'.  This will produce a list of the chapters.
It will also list all the sentences with `@chapter' in the middle of
the line.

  If you want to see only those lines that start with the word
`@chapter', type `^@chapter' when prompted by `occur'.  If you want to
see all the lines that end with a word or phrase, end the last word
with a `$'; for example, `catching mistakes$'.  This can be helpful
when you want to see all the nodes that are part of the same chapter or
section and therefore have the same `Up' pointer.

  *Note Using Occur: (xemacs)Other Repeating Search, for more
information.


File: texinfo.info,  Node: Running Info-Validate,  Prev: Using occur,  Up: Catching Mistakes

G.5 Finding Badly Referenced Nodes
==================================

You can use the `Info-validate' command to check whether any of the
`Next', `Previous', `Up' or other node pointers fail to point to a
node.  This command checks that every node pointer points to an
existing node.  The `Info-validate' command works only on Info files,
not on Texinfo files.

  The `makeinfo' program validates pointers automatically, so you do
not need to use the `Info-validate' command if you are using
`makeinfo'.  You only may need to use `Info-validate' if you are unable
to run `makeinfo' and instead must create an Info file using
`texinfo-format-region' or `texinfo-format-buffer', or if you write an
Info file from scratch.

* Menu:

* Using Info-validate::         How to run `Info-validate'.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.


File: texinfo.info,  Node: Using Info-validate,  Next: Unsplit,  Prev: Running Info-Validate,  Up: Running Info-Validate

G.5.1 Running `Info-validate'
-----------------------------

To use `Info-validate', visit the Info file you wish to check and type:

     M-x Info-validate

(Note that the `Info-validate' command requires an upper case `I'.  You
may also need to create a tag table before running `Info-validate'.
*Note Tagifying::.)

  If your file is valid, you will receive a message that says "File
appears valid".  However, if you have a pointer that does not point to
a node, error messages will be displayed in a buffer called `*problems
in info file*'.

  For example, `Info-validate' was run on a test file that contained
only the first node of this manual.  One of the messages said:

     In node "Overview", invalid Next: Texinfo Mode

This meant that the node called `Overview' had a `Next' pointer that
did not point to anything (which was true in this case, since the test
file had only one node in it).

  Now suppose we add a node named `Texinfo Mode' to our test case but
we do not specify a `Previous' for this node.  Then we will get the
following error message:

     In node "Texinfo Mode", should have Previous: Overview

This is because every `Next' pointer should be matched by a `Previous'
(in the node where the `Next' points) which points back.

  `Info-validate' also checks that all menu entries and cross references
point to actual nodes.

  Note that `Info-validate' requires a tag table and does not work with
files that have been split.  (The `texinfo-format-buffer' command
automatically splits large files.)  In order to use `Info-validate' on
a large file, you must run `texinfo-format-buffer' with an argument so
that it does not split the Info file; and you must create a tag table
for the unsplit file.


File: texinfo.info,  Node: Unsplit,  Next: Tagifying,  Prev: Using Info-validate,  Up: Running Info-Validate

G.5.2 Creating an Unsplit File
------------------------------

You can run `Info-validate' only on a single Info file that has a tag
table.  The command will not work on the indirect subfiles that are
generated when a master file is split.  If you have a large file
(longer than 70,000 bytes or so), you need to run the
`texinfo-format-buffer' or `makeinfo-buffer' command in such a way that
it does not create indirect subfiles.  You will also need to create a
tag table for the Info file.  After you have done this, you can run
`Info-validate' and look for badly referenced nodes.

  The first step is to create an unsplit Info file.  To prevent
`texinfo-format-buffer' from splitting a Texinfo file into smaller Info
files, give a prefix to the `M-x texinfo-format-buffer' command:

     C-u M-x texinfo-format-buffer

or else

     C-u C-c C-e C-b

When you do this, Texinfo will not split the file and will not create a
tag table for it.  


File: texinfo.info,  Node: Tagifying,  Next: Splitting,  Prev: Unsplit,  Up: Running Info-Validate

G.5.3 Tagifying a File
----------------------

After creating an unsplit Info file, you must create a tag table for
it.  Visit the Info file you wish to tagify and type:

     M-x Info-tagify

(Note the upper case `I' in `Info-tagify'.)  This creates an Info file
with a tag table that you can validate.

  The third step is to validate the Info file:

     M-x Info-validate

(Note the upper case `I' in `Info-validate'.)  In brief, the steps are:

     C-u M-x texinfo-format-buffer
     M-x Info-tagify
     M-x Info-validate

  After you have validated the node structure, you can rerun
`texinfo-format-buffer' in the normal way so it will construct a tag
table and split the file automatically, or you can make the tag table
and split the file manually.


File: texinfo.info,  Node: Splitting,  Prev: Tagifying,  Up: Running Info-Validate

G.5.4 Splitting a File Manually
-------------------------------

You should split a large file or else let the `texinfo-format-buffer'
or `makeinfo-buffer' command do it for you automatically.  (Generally
you will let one of the formatting commands do this job for you.  *Note
Create an Info File::.)

  The split-off files are called the indirect subfiles.

  Info files are split to save memory.  With smaller files, Emacs does
not have make such a large buffer to hold the information.

  If an Info file has more than 30 nodes, you should also make a tag
table for it. *Note Using Info-validate::, for information about
creating a tag table.  (Again, tag tables are usually created
automatically by the formatting command; you only need to create a tag
table yourself if you are doing the job manually.  Most likely, you
will do this for a large, unsplit file on which you have run
`Info-validate'.)

  Visit the Info file you wish to tagify and split and type the two
commands:

     M-x Info-tagify
     M-x Info-split

(Note that the `I' in `Info' is upper case.)

  When you use the `Info-split' command, the buffer is modified into a
(small) Info file which lists the indirect subfiles.  This file should
be saved in place of the original visited file.  The indirect subfiles
are written in the same directory the original file is in, with names
generated by appending `-' and a number to the original file name.

  The primary file still functions as an Info file, but it contains just
the tag table and a directory of subfiles.


File: texinfo.info,  Node: Refilling Paragraphs,  Next: Command Syntax,  Prev: Catching Mistakes,  Up: Top

Appendix H Refilling Paragraphs
*******************************

The `@refill' command refills and, optionally, indents the first line
of a paragraph.(1) (*note Refilling Paragraphs-Footnote-1::) The
`@refill' command is no longer important, but we describe it here
because you once needed it.  You will see it in many old Texinfo files.

  Without refilling, paragraphs containing long @-constructs may look
bad after formatting because the formatter removes @-commands and
shortens some lines more than others.  In the past, neither the
`texinfo-format-region' command nor the `texinfo-format-buffer' command
refilled paragraphs automatically.  The `@refill' command had to be
written at the end of every paragraph to cause these formatters to fill
them.  (Both TeX and `makeinfo' have always refilled paragraphs
automatically.)  Now, all the Info formatters automatically fill and
indent those paragraphs that need to be filled and indented.

  The `@refill' command causes `texinfo-format-region' and
`texinfo-format-buffer' to refill a paragraph in the Info file _after_
all the other processing has been done.  For this reason, you can not
use `@refill' with a paragraph containing either `@*' or `@w{ ... }'
since the refilling action will override those two commands.

  The `texinfo-format-region' and `texinfo-format-buffer' commands now
automatically append `@refill' to the end of each paragraph that should
be filled.  They do not append `@refill' to the ends of paragraphs that
contain `@*' or `@w{ ...}' and therefore do not refill or indent them.


File: texinfo.info,  Node: Refilling Paragraphs-Footnotes,  Up: Refilling Paragraphs

  (1) Perhaps the command should have been called the
`@refillandindent' command, but `@refill' is shorter and the name was
chosen before indenting was possible.


File: texinfo.info,  Node: Command Syntax,  Next: Obtaining TeX,  Prev: Refilling Paragraphs,  Up: Top

Appendix I @-Command Syntax
***************************

The character `@' is used to start special Texinfo commands.  (It has
the same meaning that `\' has in plain TeX.)  Texinfo has four types of
@-command:

1. Non-alphabetic commands.
     These commands consist of an @ followed by a punctuation mark or
     other character that is not part of the alphabet.  Non-alphabetic
     commands are almost always part of the text within a paragraph,
     and never take any argument.  The two characters (@ and the other
     one) are complete in themselves; none is followed by braces.  The
     non-alphabetic commands are: `@.', `@:', `@*', `@SPACE', `@TAB',
     `@NL', `@@', `@{', and `@}'.

2. Alphabetic commands that do not require arguments.
     These commands start with @ followed by a word followed by left-
     and right-hand braces.  These commands insert special symbols in
     the document; they do not require arguments.  For example,
     `@dots{}' => `...', `@equiv{}' => `==', `@TeX{}' => `TeX', and
     `@bullet{}' => `*'.

3. Alphabetic commands that require arguments within braces.
     These commands start with @ followed by a letter or a word,
     followed by an argument within braces.  For example, the command
     `@dfn' indicates the introductory or defining use of a term; it is
     used as follows: `In Texinfo, @@-commands are @dfn{mark-up}
     commands.'

4. Alphabetic commands that occupy an entire line.
     These commands occupy an entire line.  The line starts with @,
     followed by the name of the command (a word); for example,
     `@center' or `@cindex'.  If no argument is needed, the word is
     followed by the end of the line.  If there is an argument, it is
     separated from the command name by a space.  Braces are not used.

  Thus, the alphabetic commands fall into classes that have different
argument syntaxes.  You cannot tell to which class a command belongs by
the appearance of its name, but you can tell by the command's meaning:
if the command stands for a glyph, it is in class 2 and does not
require an argument; if it makes sense to use the command together with
other text as part of a paragraph, the command is in class 3 and must
be followed by an argument in braces; otherwise, it is in class 4 and
uses the rest of the line as its argument.

  The purpose of having a different syntax for commands of classes 3 and
4 is to make Texinfo files easier to read, and also to help the GNU
Emacs paragraph and filling commands work properly.  There is only one
exception to this rule: the command `@refill', which is always used at
the end of a paragraph immediately following the final period or other
punctuation character.  `@refill' takes no argument and does _not_
require braces.  `@refill' never confuses the Emacs paragraph commands
because it cannot appear at the beginning of a line.


File: texinfo.info,  Node: Obtaining TeX,  Next: Command and Variable Index,  Prev: Command Syntax,  Up: Top

Appendix J How to Obtain TeX
****************************

TeX is freely redistributable.  You can obtain TeX for Unix systems via
anonymous ftp or on physical media.  The core material consists of the
Web2c TeX distribution (`http://tug.org/web2c').

  Instructions for retrieval by anonymous ftp and information on other
available distributions:
     `ftp://tug.org/tex/unixtex.ftp'
     `http://tug.org/unixtex.ftp'

  The Free Software Foundation provides a core distribution on its
Source Code CD-ROM suitable for printing Texinfo manuals; the
University of Washington maintains and supports a tape distribution;
the TeX Users Group co-sponsors a complete CD-ROM TeX distribution.

   * For the FSF Source Code CD-ROM, please contact:

          Free Software Foundation, Inc.
          59 Temple Place Suite 330
          Boston, MA   02111-1307
          USA

          Telephone: +1-617-542-5942
          Fax: (including Japan) +1-617-542-2652
          Free Dial Fax (in Japan):
                0031-13-2473 (KDD)
                0066-3382-0158 (IDC)
          Electronic mail: `gnu@gnu.org'

   * To order a complete distribution on CD-ROM, please see
     `http://tug.org/tex-live.html'.  (This distribution is also
     available by FTP; see the URL's above.)

   * To order a full distribution from the University of Washington on
     either a 1/4in 4-track QIC-24 cartridge or a 4mm DAT cartridge,
     send $210 to:

          Pierre A. MacKay
          Denny Hall, Mail Stop DH-10
          University of Washington
          Seattle, WA   98195
          USA
          Telephone: +1-206-543-2268
          Electronic mail: `mackay@cs.washington.edu'

     Please make checks payable to the University of Washington.
     Checks must be in U.S. dollars, drawn on a U.S. bank.  Overseas
     sites: please add to the base cost, if desired, $20.00 for
     shipment via air parcel post, or $30.00 for shipment via courier.


  Many other TeX distributions are available; see `http://tug.org/'.


File: texinfo.info,  Node: Command and Variable Index,  Next: Concept Index,  Prev: Obtaining TeX,  Up: Top

Command and Variable Index
**************************

This is an alphabetical list of all the @-commands, assorted Emacs Lisp
functions, and several variables.  To make the list easier to use, the
commands are listed without their preceding `@'.

 [index ]
* Menu:

* ! (end of sentence):                   Ending a Sentence.   (line   6)
* ":                                     Inserting Accents.   (line  13)
* ':                                     Inserting Accents.   (line  13)
* (newline):                             Multiple Spaces.     (line   6)
* (space):                               Multiple Spaces.     (line   6)
* (tab):                                 Multiple Spaces.     (line   6)
* * (force line break):                  Line Breaks.         (line   6)
* ,:                                     Inserting Accents.   (line  13)
* -:                                     - and hyphenation.   (line   6)
* .  (end of sentence):                  Ending a Sentence.   (line   6)
* : (suppress widening):                 Not Ending a Sentence.
                                                              (line  16)
* =:                                     Inserting Accents.   (line  13)
* ? (end of sentence):                   Ending a Sentence.   (line   6)
* @ (single @):                          Inserting An Atsign. (line   6)
* ^:                                     Inserting Accents.   (line  13)
* `:                                     Inserting Accents.   (line  13)
* AA:                                    Inserting Accents.   (line  33)
* aa:                                    Inserting Accents.   (line  33)
* AE:                                    Inserting Accents.   (line  33)
* ae:                                    Inserting Accents.   (line  33)
* afourpaper:                            A4 Paper.            (line   6)
* appendix:                              unnumbered & appendix.
                                                              (line   6)
* appendixsec:                           unnumberedsec appendixsec heading.
                                                              (line   6)
* appendixsection:                       unnumberedsec appendixsec heading.
                                                              (line  18)
* appendixsubsec:                        unnumberedsubsec appendixsubsec subheading.
                                                              (line   6)
* appendixsubsubsec:                     subsubsection.       (line   6)
* apply:                                 Sample Function Definition.
                                                              (line  14)
* asis:                                  table.               (line  19)
* author:                                title subtitle author.
                                                              (line   6)
* b (bold font):                         Fonts.               (line   6)
* buffer-end:                            Def Cmd Template.    (line  74)
* bullet:                                bullet.              (line   6)
* bye <1>:                               File End.            (line   6)
* bye:                                   Ending a File.       (line   6)
* c (comment):                           Comments.            (line  16)
* cartouche:                             cartouche.           (line   6)
* center:                                titlefont center sp. (line   6)
* centerchap:                            chapter.             (line  25)
* chapheading:                           majorheading & chapheading.
                                                              (line   6)
* chapter:                               chapter.             (line   6)
* cindex:                                Indexing Commands.   (line  56)
* cite:                                  cite.                (line   6)
* clear:                                 ifset ifclear.       (line  40)
* code:                                  code.                (line   6)
* columnfractions:                       Multitable Column Widths.
                                                              (line  11)
* comment:                               Comments.            (line  16)
* contents:                              Contents.            (line   6)
* copyright <1>:                         copyright symbol.    (line   6)
* copyright:                             Copyright & Permissions.
                                                              (line  30)
* cropmarks:                             Cropmarks and Magnification.
                                                              (line   6)
* defcodeindex:                          New Indices.         (line   6)
* defcv:                                 Abstract Objects.    (line  17)
* deffn:                                 Functions Commands.  (line   9)
* deffnx:                                deffnx.              (line   6)
* defindex:                              New Indices.         (line   6)
* definfoenclose:                        Customized Highlighting.
                                                              (line  12)
* defivar:                               Abstract Objects.    (line  39)
* defmac:                                Functions Commands.  (line  67)
* defmethod:                             Abstract Objects.    (line  96)
* defop:                                 Abstract Objects.    (line  52)
* defopt:                                Variables Commands.  (line  56)
* defspec:                               Functions Commands.  (line  72)
* deftp:                                 Data Types.          (line   8)
* deftypefn:                             Typed Functions.     (line  10)
* deftypefun:                            Typed Functions.     (line  75)
* deftypevar:                            Typed Variables.     (line  42)
* deftypevr:                             Typed Variables.     (line  12)
* defun:                                 Functions Commands.  (line  42)
* defvar:                                Variables Commands.  (line  38)
* defvr:                                 Variables Commands.  (line   8)
* dfn:                                   dfn.                 (line   6)
* dircategory:                           Installing Dir Entries.
                                                              (line  11)
* direntry:                              Installing Dir Entries.
                                                              (line  11)
* display:                               display.             (line   6)
* dmn:                                   dmn.                 (line   6)
* dotaccent:                             Inserting Accents.   (line  13)
* dotless:                               Inserting Accents.   (line  33)
* dots:                                  dots.                (line   6)
* email:                                 email.               (line   6)
* emph:                                  emph & strong.       (line   6)
* end <1>:                               Introducing Lists.   (line  20)
* end:                                   Quotations and Examples.
                                                              (line  15)
* end titlepage:                         end titlepage.       (line   6)
* enumerate:                             enumerate.           (line   6)
* evenfooting:                           Custom Headings.     (line  53)
* evenheading:                           Custom Headings.     (line  53)
* everyfooting:                          Custom Headings.     (line  46)
* everyheading:                          Custom Headings.     (line  46)
* example:                               example.             (line   6)
* exclamdown:                            Inserting Accents.   (line  33)
* exdent:                                exdent.              (line   6)
* file:                                  file.                (line   6)
* filll:                                 Copyright & Permissions.
                                                              (line  16)
* finalout:                              Overfull hboxes.     (line  33)
* findex:                                Indexing Commands.   (line  59)
* flushleft:                             flushleft & flushright.
                                                              (line   6)
* flushright:                            flushleft & flushright.
                                                              (line   6)
* foobar:                                Optional Arguments.  (line  23)
* footnote:                              Footnotes.           (line   6)
* footnotestyle:                         Footnote Styles.     (line  43)
* format:                                format.              (line   6)
* forward-word:                          Def Cmd Template.    (line  31)
* ftable:                                ftable vtable.       (line   6)
* group:                                 group.               (line   6)
* H:                                     Inserting Accents.   (line  13)
* heading:                               unnumberedsec appendixsec heading.
                                                              (line   6)
* headings:                              headings on off.     (line   6)
* html:                                  Raw Formatter Commands.
                                                              (line  37)
* hyphenation:                           - and hyphenation.   (line   6)
* i (italic font):                       Fonts.               (line   6)
* ifclear:                               ifset ifclear.       (line  60)
* ifhtml <1>:                            Raw Formatter Commands.
                                                              (line  37)
* ifhtml:                                Conditional Commands.
                                                              (line  14)
* ifinfo:                                Conditional Commands.
                                                              (line   6)
* ifnothtml:                             Conditional Not Commands.
                                                              (line   6)
* ifnotinfo:                             Conditional Not Commands.
                                                              (line   6)
* ifnottex:                              Conditional Not Commands.
                                                              (line   6)
* ifset:                                 ifset ifclear.       (line   6)
* iftex:                                 Conditional Commands.
                                                              (line  14)
* ignore:                                Comments.            (line  26)
* image:                                 Images.              (line   6)
* include:                               Using Include Files. (line   6)
* Info-validate:                         Running Info-Validate.
                                                              (line   6)
* inforef:                               inforef.             (line   6)
* input (TeX command):                   Minimum.             (line  24)
* isearch-backward:                      deffnx.              (line  22)
* isearch-forward:                       deffnx.              (line  21)
* item <1>:                              Multitable Rows.     (line   6)
* item <2>:                              table.               (line  35)
* item:                                  itemize.             (line  23)
* itemize:                               itemize.             (line   6)
* itemx:                                 itemx.               (line   6)
* kbd:                                   kbd.                 (line   6)
* kbdinputstyle:                         kbd.                 (line  20)
* key:                                   key.                 (line   6)
* kindex:                                Indexing Commands.   (line  65)
* L:                                     Inserting Accents.   (line  33)
* l:                                     Inserting Accents.   (line  33)
* lisp:                                  Lisp Example.        (line   6)
* lowersections:                         Raise/lower sections.
                                                              (line   6)
* macro:                                 Defining Macros.     (line   6)
* mag (TeX command):                     Cropmarks and Magnification.
                                                              (line  24)
* majorheading:                          majorheading & chapheading.
                                                              (line   6)
* makeinfo-buffer:                       makeinfo in Emacs.   (line  16)
* makeinfo-kill-job:                     makeinfo in Emacs.   (line  38)
* makeinfo-recenter-output-buffer:       makeinfo in Emacs.   (line  43)
* makeinfo-region:                       makeinfo in Emacs.   (line  12)
* math:                                  math.                (line   6)
* menu:                                  Menus.               (line   6)
* minus:                                 minus.               (line   6)
* multitable:                            Multi-column Tables. (line   6)
* need:                                  need.                (line   6)
* next-error:                            makeinfo in Emacs.   (line  27)
* noindent:                              noindent.            (line   6)
* O:                                     Inserting Accents.   (line  33)
* o:                                     Inserting Accents.   (line  33)
* occur:                                 Using occur.         (line   6)
* occur-mode-goto-occurrence:            Showing the Structure.
                                                              (line  22)
* oddfooting:                            Custom Headings.     (line  53)
* oddheading:                            Custom Headings.     (line  53)
* OE:                                    Inserting Accents.   (line  33)
* oe:                                    Inserting Accents.   (line  33)
* page:                                  page.                (line   6)
* paragraphindent:                       paragraphindent.     (line   6)
* pindex:                                Indexing Commands.   (line  68)
* pounds:                                pounds.              (line   6)
* printindex:                            Printing Indices & Menus.
                                                              (line   6)
* pxref:                                 pxref.               (line   6)
* questiondown:                          Inserting Accents.   (line  33)
* quotation:                             quotation.           (line   6)
* r (Roman font):                        Fonts.               (line   6)
* raisesections:                         Raise/lower sections.
                                                              (line   6)
* ref:                                   ref.                 (line   6)
* refill:                                Refilling Paragraphs.
                                                              (line   6)
* ringaccent:                            Inserting Accents.   (line  13)
* samp:                                  samp.                (line   6)
* sc (small caps font):                  Smallcaps.           (line   6)
* section:                               section.             (line   6)
* set:                                   ifset ifclear.       (line  12)
* setchapternewpage:                     setchapternewpage.   (line   6)
* setfilename:                           setfilename.         (line   6)
* settitle:                              settitle.            (line   6)
* shortcontents:                         Contents.            (line   6)
* shorttitlepage:                        titlepage.           (line  40)
* smallbook:                             smallbook.           (line   6)
* smallexample:                          smallexample & smalllisp.
                                                              (line   6)
* smalllisp:                             smallexample & smalllisp.
                                                              (line   6)
* sp (line spacing):                     sp.                  (line   6)
* sp (titlepage line spacing):           titlefont center sp. (line   6)
* ss:                                    Inserting Accents.   (line  33)
* strong:                                emph & strong.       (line   6)
* subheading:                            unnumberedsubsec appendixsubsec subheading.
                                                              (line   6)
* subsection:                            subsection.          (line   6)
* subsubheading:                         subsubsection.       (line   6)
* subsubsection:                         subsubsection.       (line   6)
* subtitle:                              title subtitle author.
                                                              (line   6)
* summarycontents:                       Contents.            (line   6)
* syncodeindex:                          syncodeindex.        (line   6)
* synindex:                              synindex.            (line   6)
* t (typewriter font):                   Fonts.               (line   6)
* table:                                 Two-column Tables.   (line   6)
* tex:                                   Raw Formatter Commands.
                                                              (line  19)
* tex (command):                         tex.                 (line   6)
* texinfo-all-menus-update:              Updating Commands.   (line 112)
* texinfo-every-node-update:             Updating Commands.   (line 107)
* texinfo-format-buffer <1>:             texinfo-format commands.
                                                              (line   6)
* texinfo-format-buffer:                 Info Formatting.     (line  22)
* texinfo-format-region <1>:             texinfo-format commands.
                                                              (line   6)
* texinfo-format-region:                 Info Formatting.     (line  13)
* texinfo-indent-menu-description:       Other Updating Commands.
                                                              (line  45)
* texinfo-insert-@code:                  Inserting.           (line  15)
* texinfo-insert-@dfn:                   Inserting.           (line  19)
* texinfo-insert-@end:                   Inserting.           (line  23)
* texinfo-insert-@example:               Inserting.           (line  62)
* texinfo-insert-@item:                  Inserting.           (line  30)
* texinfo-insert-@kbd:                   Inserting.           (line  35)
* texinfo-insert-@node:                  Inserting.           (line  39)
* texinfo-insert-@noindent:              Inserting.           (line  44)
* texinfo-insert-@samp:                  Inserting.           (line  49)
* texinfo-insert-@table:                 Inserting.           (line  53)
* texinfo-insert-@var:                   Inserting.           (line  58)
* texinfo-insert-braces:                 Inserting.           (line  67)
* texinfo-insert-node-lines:             Other Updating Commands.
                                                              (line  10)
* texinfo-make-menu:                     Updating Commands.   (line  93)
* texinfo-master-menu:                   Updating Commands.   (line  55)
* texinfo-multiple-files-update:         texinfo-multiple-files-update.
                                                              (line   6)
* texinfo-multiple-files-update (in brief): Other Updating Commands.
                                                              (line  34)
* texinfo-sequential-node-update:        Other Updating Commands.
                                                              (line  54)
* texinfo-show-structure <1>:            Using texinfo-show-structure.
                                                              (line   6)
* texinfo-show-structure:                Showing the Structure.
                                                              (line  18)
* texinfo-start-menu-description:        Inserting.           (line  94)
* texinfo-tex-buffer:                    Printing.            (line  21)
* texinfo-tex-print:                     Printing.            (line  42)
* texinfo-tex-region:                    Printing.            (line  27)
* texinfo-update-node:                   Updating Commands.   (line  83)
* thischapter:                           Custom Headings.     (line  75)
* thischaptername:                       Custom Headings.     (line  72)
* thisfile:                              Custom Headings.     (line  83)
* thispage:                              Custom Headings.     (line  69)
* thistitle:                             Custom Headings.     (line  79)
* tieaccent:                             Inserting Accents.   (line  13)
* tindex:                                Indexing Commands.   (line  71)
* title:                                 title subtitle author.
                                                              (line   6)
* titlefont:                             titlefont center sp. (line   6)
* titlepage:                             titlepage.           (line   6)
* today:                                 Custom Headings.     (line  92)
* top (@-command):                       makeinfo top command.
                                                              (line   6)
* u:                                     Inserting Accents.   (line  13)
* ubaraccent:                            Inserting Accents.   (line  13)
* udotaccent:                            Inserting Accents.   (line  13)
* unmacro:                               Defining Macros.     (line  26)
* unnumbered:                            unnumbered & appendix.
                                                              (line   6)
* unnumberedsec:                         unnumberedsec appendixsec heading.
                                                              (line   6)
* unnumberedsubsec:                      unnumberedsubsec appendixsubsec subheading.
                                                              (line   6)
* unnumberedsubsubsec:                   subsubsection.       (line   6)
* up-list:                               Inserting.           (line  72)
* uref:                                  uref.                (line   6)
* url:                                   url.                 (line   6)
* v:                                     Inserting Accents.   (line  13)
* value:                                 value.               (line   6)
* var:                                   var.                 (line   6)
* vindex:                                Indexing Commands.   (line  62)
* vskip:                                 Copyright & Permissions.
                                                              (line  16)
* vtable:                                ftable vtable.       (line   6)
* w (prevent line break):                w.                   (line   6)
* xref:                                  xref.                (line   6)
* { (single {):                          Inserting Braces.    (line   6)
* } (single }):                          Inserting Braces.    (line   6)
* ~:                                     Inserting Accents.   (line  13)


File: texinfo.info,  Node: Concept Index,  Prev: Command and Variable Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* !:                                     Inserting Accents.   (line  33)
* (dir) as Up node of Top node:          First Node.          (line  11)
* --delete:                              Invoking install-info.
                                                              (line  25)
* --dir-file=NAME:                       Invoking install-info.
                                                              (line  30)
* --entry=TEXT:                          Invoking install-info.
                                                              (line  34)
* --error-limit=LIMIT:                   makeinfo options.    (line  32)
* --fill-column=WIDTH:                   makeinfo options.    (line  37)
* --footnote-style=STYLE:                makeinfo options.    (line  45)
* --force:                               makeinfo options.    (line  55)
* --help <1>:                            Invoking install-info.
                                                              (line  41)
* --help:                                makeinfo options.    (line  59)
* --info-dir=DIR:                        Invoking install-info.
                                                              (line  49)
* --info-file=FILE:                      Invoking install-info.
                                                              (line  45)
* --item=TEXT:                           Invoking install-info.
                                                              (line  52)
* --no-headers:                          makeinfo options.    (line  68)
* --no-number-footnotes:                 makeinfo options.    (line  93)
* --no-pointer-validate:                 makeinfo options.    (line  81)
* --no-split:                            makeinfo options.    (line  75)
* --no-validate:                         makeinfo options.    (line  81)
* --no-warn:                             makeinfo options.    (line  87)
* --output=FILE:                         makeinfo options.    (line  99)
* --paragraph-indent=INDENT:             makeinfo options.    (line 109)
* --quiet:                               Invoking install-info.
                                                              (line  56)
* --reference-limit=LIMIT:               makeinfo options.    (line 124)
* --remove:                              Invoking install-info.
                                                              (line  59)
* --section=SEC:                         Invoking install-info.
                                                              (line  62)
* --verbose:                             makeinfo options.    (line 134)
* --version <1>:                         Invoking install-info.
                                                              (line  68)
* --version:                             makeinfo options.    (line 139)
* -D VAR:                                makeinfo options.    (line  28)
* -I DIR:                                makeinfo options.    (line  63)
* -o FILE:                               makeinfo options.    (line  99)
* -P DIR:                                makeinfo options.    (line 105)
* .cshrc initialization file:            Preparing for TeX.   (line   6)
* .profile initialization file:          Preparing for TeX.   (line   6)
* /L:                                    Inserting Accents.   (line  33)
* /l:                                    Inserting Accents.   (line  33)
* /O:                                    Inserting Accents.   (line  33)
* /o:                                    Inserting Accents.   (line  33)
* ?:                                     Inserting Accents.   (line  33)
* @-command in nodename:                 Node Line Requirements.
                                                              (line  23)
* @-command list:                        Command List.        (line   6)
* @-command syntax:                      Command Syntax.      (line   6)
* @-commands:                            Formatting Commands. (line   6)
* @include file sample:                  Sample Include File. (line   6)
* @menu parts:                           Menu Parts.          (line   6)
* @node line writing:                    Writing a Node.      (line   6)
* A4 paper, printing on:                 A4 Paper.            (line   6)
* AA:                                    Inserting Accents.   (line  33)
* aa:                                    Inserting Accents.   (line  33)
* Abbreviations for keys:                key.                 (line  19)
* Accents, inserting:                    Inserting Accents.   (line   6)
* Acute accent:                          Inserting Accents.   (line  13)
* Adding a new info file:                New Info File.       (line   6)
* AE:                                    Inserting Accents.   (line  33)
* ae:                                    Inserting Accents.   (line  33)
* Alphabetical @-command list:           Command List.        (line   6)
* Another Info directory:                Other Info Directories.
                                                              (line   6)
* Apostrophe in nodename:                Node Line Requirements.
                                                              (line  34)
* Arguments, repeated and optional:      Optional Arguments.  (line   6)
* Aspect ratio of images:                Images.              (line  16)
* Automatic pointer creation with makeinfo: makeinfo Pointer Creation.
                                                              (line   6)
* Automatically insert nodes, menus:     Updating Nodes and Menus.
                                                              (line   6)
* Backslash, and macros:                 Invoking Macros.     (line  23)
* Badly referenced nodes:                Running Info-Validate.
                                                              (line   6)
* Batch formatting for Info:             Batch Formatting.    (line   6)
* Beginning a Texinfo file:              Beginning a File.    (line   6)
* Beginning line of a Texinfo file:      First Line.          (line   6)
* Berry, Karl:                           Acknowledgements.    (line   6)
* Big points:                            Images.              (line  33)
* Black rectangle in hardcopy:           Overfull hboxes.     (line  28)
* Blank lines:                           sp.                  (line   6)
* Body of a macro:                       Defining Macros.     (line  19)
* Book characteristics, printed:         Printed Books.       (line   6)
* Book, printing small:                  smallbook.           (line   6)
* Box with rounded corners:              cartouche.           (line   6)
* Braces and argument syntax:            Command Syntax.      (line  40)
* Braces, inserting:                     Braces Atsigns.      (line   6)
* Braces, when to use:                   Formatting Commands. (line  49)
* Breaks in a line:                      Line Breaks.         (line   6)
* Breve accent:                          Inserting Accents.   (line  13)
* Buffer formatting and printing:        Printing.            (line   6)
* Bullets, inserting:                    Dots Bullets.        (line   6)
* Case in nodename:                      Node Line Requirements.
                                                              (line  45)
* Catching errors with Info formatting:  Debugging with Info. (line   6)
* Catching errors with TeX formatting:   Debugging with TeX.  (line   6)
* Catching mistakes:                     Catching Mistakes.   (line   6)
* Cedilla accent:                        Inserting Accents.   (line  13)
* Centimeters:                           Images.              (line  39)
* Chapter structuring:                   Structuring.         (line   6)
* Characteristics, printed books or manuals: Printed Books.   (line   6)
* Chassell, Robert J.:                   Acknowledgements.    (line   6)
* Check accent:                          Inserting Accents.   (line  13)
* Checking for badly referenced nodes:   Running Info-Validate.
                                                              (line   6)
* Ciceros:                               Images.              (line  48)
* Circumflex accent:                     Inserting Accents.   (line  13)
* code, arg to @kbdinputstyle:           kbd.                 (line  24)
* colon last in INFOPATH:                Other Info Directories.
                                                              (line  69)
* Column widths, defining for multitables: Multitable Column Widths.
                                                              (line   6)
* Combining indices:                     Combining Indices.   (line   6)
* Comma in nodename:                     Node Line Requirements.
                                                              (line  34)
* Command definitions:                   Sample Function Definition.
                                                              (line   6)
* Commands to insert special characters: Braces Atsigns.      (line   6)
* Commands using raw HTML:               Raw Formatter Commands.
                                                              (line   6)
* Commands using raw TeX:                Raw Formatter Commands.
                                                              (line   6)
* Commands, inserting them:              Inserting.           (line   6)
* Comments:                              Comments.            (line  16)
* Compile command for formatting:        Compile-Command.     (line   6)
* Conditionally visible text:            Conditionals.        (line   6)
* Conditions for copying Texinfo:        Copying.             (line   6)
* Contents, Table of:                    Contents.            (line   6)
* Contents-like outline of file structure: Showing the Structure.
                                                              (line   6)
* Conventions for writing definitions:   Def Cmd Conventions. (line   6)
* Conventions, syntactic:                Conventions.         (line   6)
* Copying conditions:                    Copying.             (line   6)
* Copying permissions:                   Sample Permissions.  (line   6)
* Copying software:                      Software Copying Permissions.
                                                              (line   6)
* Copyright page:                        Copyright & Permissions.
                                                              (line   6)
* Correcting mistakes:                   Catching Mistakes.   (line   6)
* Create nodes, menus automatically:     Updating Nodes and Menus.
                                                              (line   6)
* Creating an Info file:                 Create an Info File. (line   6)
* Creating an unsplit file:              Unsplit.             (line   6)
* Creating index entries:                Indexing Commands.   (line   6)
* Creating indices:                      Indices.             (line   6)
* Creating pointers with makeinfo:       makeinfo Pointer Creation.
                                                              (line   6)
* Cropmarks for printing:                Cropmarks and Magnification.
                                                              (line   6)
* Cross reference parts:                 Cross Reference Parts.
                                                              (line   6)
* Cross references:                      Cross References.    (line   6)
* Cross references using @inforef:       inforef.             (line   6)
* Cross references using @pxref:         pxref.               (line   6)
* Cross references using @ref:           ref.                 (line   6)
* Cross references using @xref:          xref.                (line   6)
* Customized highlighting:               Customized Highlighting.
                                                              (line   6)
* Customizing of TeX for Texinfo:        Preparing for TeX.   (line  24)
* Debugging the Texinfo structure:       Catching Mistakes.   (line   6)
* Debugging with Info formatting:        Debugging with Info. (line   6)
* Debugging with TeX formatting:         Debugging with TeX.  (line   6)
* Defining indexing entries:             Indexing Commands.   (line   6)
* Defining macros:                       Defining Macros.     (line   6)
* Defining new indices:                  New Indices.         (line   6)
* Defining new Texinfo commands:         Macros.              (line   6)
* Definition commands:                   Definition Commands. (line   6)
* Definition conventions:                Def Cmd Conventions. (line   6)
* Definition template:                   Def Cmd Template.    (line   6)
* Definitions grouped together:          deffnx.              (line   6)
* Description for menu, start:           Inserting.           (line  94)
* Dido^t points:                         Images.              (line  45)
* Different cross reference commands:    Cross Reference Commands.
                                                              (line   6)
* Dimension formatting:                  dmn.                 (line   6)
* Dimensions and image sizes:            Images.              (line  23)
* dir directory for Info installation:   Install an Info File.
                                                              (line   6)
* dir file listing:                      New Info File.       (line   6)
* dir, created by install-info:          Invoking install-info.
                                                              (line  19)
* Display formatting:                    display.             (line   6)
* distinct, arg to @kbdinputstyle:       kbd.                 (line  24)
* Distorting images:                     Images.              (line  16)
* Distribution:                          Software Copying Permissions.
                                                              (line   6)
* Dot accent:                            Inserting Accents.   (line  13)
* Dotless i, j:                          Inserting Accents.   (line  33)
* Dots, inserting <1>:                   dots.                (line   6)
* Dots, inserting:                       Dots Bullets.        (line   6)
* Double-colon menu entries:             Less Cluttered Menu Entry.
                                                              (line   6)
* DVI file:                              Format with tex/texindex.
                                                              (line   6)
* Ellipsis, inserting:                   Dots Bullets.        (line   6)
* Emacs:                                 Texinfo Mode.        (line   6)
* Emacs shell, format, print from:       Within Emacs.        (line   6)
* Emphasizing text:                      Emphasis.            (line   6)
* Emphasizing text, font for:            emph & strong.       (line   6)
* Enclosure command for Info:            Customized Highlighting.
                                                              (line  12)
* End node footnote style:               Footnote Styles.     (line   9)
* End of header line:                    End of Header.       (line   6)
* End titlepage starts headings:         end titlepage.       (line   6)
* Ending a Sentence:                     Ending a Sentence.   (line   6)
* Ending a Texinfo file:                 Ending a File.       (line   6)
* Entries for an index:                  Indexing Commands.   (line   6)
* Entries, making index:                 Index Entries.       (line   6)
* Enumeration:                           enumerate.           (line   6)
* epsf.tex:                              Images.              (line  58)
* epsf.tex, installing:                  Preparing for TeX.   (line  19)
* Equivalence, indicating it:            Equivalence.         (line   6)
* Error message, indicating it:          Error Glyph.         (line   6)
* Errors, parsing:                       makeinfo in Emacs.   (line  27)
* Es-zet:                                Inserting Accents.   (line  33)
* European A4 paper:                     A4 Paper.            (line   6)
* Evaluation glyph:                      result.              (line   6)
* Example for a small book:              smallexample & smalllisp.
                                                              (line   6)
* Example menu:                          Menu Example.        (line   6)
* example, arg to @kbdinputstyle:        kbd.                 (line  24)
* Examples, formatting them:             example.             (line   6)
* Expansion, indicating it:              expansion.           (line   6)
* File beginning:                        Beginning a File.    (line   6)
* File ending:                           Ending a File.       (line   6)
* File section structure, showing it:    Showing the Structure.
                                                              (line   6)
* Filling paragraphs:                    Refilling Paragraphs.
                                                              (line   6)
* Final output:                          Overfull hboxes.     (line   6)
* Finding badly referenced nodes:        Running Info-Validate.
                                                              (line   6)
* Fine-tuning, and hyphenation:          - and hyphenation.   (line   6)
* First line of a Texinfo file:          First Line.          (line   6)
* First node:                            First Node.          (line   6)
* Floating accents, inserting:           Inserting Accents.   (line   6)
* Fonts for indices:                     syncodeindex.        (line  52)
* Fonts for printing, not for Info:      Fonts.               (line   6)
* Footings:                              Headings.            (line   6)
* Footnotes:                             Footnotes.           (line   6)
* Format a dimension:                    dmn.                 (line   6)
* Format and print hardcopy:             Format/Print Hardcopy.
                                                              (line   6)
* Format and print in Texinfo mode:      Texinfo Mode Printing.
                                                              (line   6)
* Format with the compile command:       Compile-Command.     (line   6)
* Format, print from Emacs shell:        Within Emacs.        (line   6)
* Formats for images:                    Images.              (line  10)
* Formatting a file for Info:            Create an Info File. (line   6)
* Formatting commands:                   Formatting Commands. (line   6)
* Formatting examples:                   example.             (line   6)
* Formatting for Info:                   Info Formatting.     (line   6)
* Formatting for printing:               Printing.            (line   6)
* Formatting headings and footings:      Headings.            (line   6)
* Formatting requirements:               Requirements Summary.
                                                              (line   6)
* Formatting with tex and texindex:      Format with tex/texindex.
                                                              (line   6)
* Frequently used commands, inserting:   Inserting.           (line   6)
* Function definitions:                  Sample Function Definition.
                                                              (line   6)
* General syntactic conventions:         Conventions.         (line   6)
* Generating menus with indices:         Printing Indices & Menus.
                                                              (line   6)
* German S:                              Inserting Accents.   (line  33)
* Globbing:                              Format with tex/texindex.
                                                              (line  32)
* Glyphs:                                Glyphs.              (line   6)
* GNU Emacs:                             Texinfo Mode.        (line   6)
* GNU Emacs shell, format, print from:   Within Emacs.        (line   6)
* Going to other Info files' nodes:      Other Info Files.    (line   6)
* Grave accent:                          Inserting Accents.   (line  13)
* Group (hold text together vertically): group.               (line   6)
* Grouping two definitions together:     deffnx.              (line   6)
* Hardcopy, printing it:                 Format/Print Hardcopy.
                                                              (line   6)
* hboxes, overfull:                      Overfull hboxes.     (line   6)
* Header for Texinfo files:              Header.              (line   6)
* Header of a Texinfo file:              First Line.          (line   6)
* Headings:                              Headings.            (line   6)
* Headings, page, begin to appear:       end titlepage.       (line   6)
* Height of images:                      Images.              (line  16)
* Highlighting text:                     Indicating.          (line   6)
* Highlighting, customized:              Customized Highlighting.
                                                              (line   6)
* Hints:                                 Tips.                (line   8)
* Holding text together vertically:      group.               (line   6)
* HTML commands, using ordinary:         Raw Formatter Commands.
                                                              (line   6)
* Hungariam umlaut accent:               Inserting Accents.   (line  13)
* Hyphenation, helping TeX do:           - and hyphenation.   (line   6)
* Hyphenation, preventing:               w.                   (line   6)
* i:                                     Inserting Accents.   (line  33)
* If text conditionally visible:         Conditionals.        (line   6)
* ifinfo permissions:                    ifinfo Permissions.  (line   6)
* Ignored before @setfilename:           setfilename.         (line  32)
* Ignored text:                          Comments.            (line  26)
* Image formats:                         Images.              (line  10)
* Images, inserting:                     Images.              (line   6)
* Inches:                                Images.              (line  36)
* Include file requirements:             Include File Requirements.
                                                              (line   6)
* Include file sample:                   Sample Include File. (line   6)
* Include files:                         Include Files.       (line   6)
* Include files, and section levels:     Raise/lower sections.
                                                              (line  12)
* Indentation undoing:                   exdent.              (line   6)
* Indenting paragraphs:                  paragraphindent.     (line   6)
* Index entries:                         Indexing Commands.   (line   6)
* Index entries, making:                 Index Entries.       (line   6)
* Index entry writing:                   Indexing Commands.   (line  26)
* Index font types:                      Indexing Commands.   (line  51)
* Indexing commands, predefined:         Indexing Commands.   (line  53)
* Indexing table entries automatically:  ftable vtable.       (line   6)
* Indicating commands, definitions, etc.: Indicating.         (line   6)
* Indicating evaluation:                 result.              (line   6)
* Indices:                               Indices.             (line   6)
* Indices, combining them:               Combining Indices.   (line   6)
* Indices, defining new:                 New Indices.         (line   6)
* Indices, printing and menus:           Printing Indices & Menus.
                                                              (line   6)
* Indices, sorting:                      Format/Print Hardcopy.
                                                              (line   6)
* Indices, two letter names:             syncodeindex.        (line  17)
* Indirect subfiles:                     Tag and Split Files. (line  11)
* Info batch formatting:                 Batch Formatting.    (line   6)
* Info file installation:                Install an Info File.
                                                              (line   6)
* Info file requires @setfilename:       setfilename.         (line   6)
* Info file, listing new one:            New Info File.       (line   6)
* Info file, splitting manually:         Splitting.           (line   6)
* Info files:                            Info Files.          (line   6)
* Info formatting:                       Info Formatting.     (line   6)
* Info installed in another directory:   Other Info Directories.
                                                              (line   6)
* Info validating a large file:          Using Info-validate. (line   6)
* Info, creating an on-line file:        Create an Info File. (line   6)
* Info-directory-list:                   Other Info Directories.
                                                              (line  36)
* Info; other files' nodes:              Other Info Files.    (line   6)
* INFOPATH:                              Other Info Directories.
                                                              (line  47)
* Initialization file for TeX input:     Preparing for TeX.   (line   6)
* Insert nodes, menus automatically:     Updating Nodes and Menus.
                                                              (line   6)
* Inserting @, braces:                   Braces Atsigns.      (line   6)
* Inserting accents:                     Inserting Accents.   (line   6)
* Inserting dots <1>:                    dots.                (line   6)
* Inserting dots:                        Dots Bullets.        (line   6)
* Inserting ellipsis:                    Dots Bullets.        (line   6)
* Inserting frequently used commands:    Inserting.           (line   6)
* Inserting space:                       Inserting Space.     (line   6)
* Inserting special characters and symbols: Insertions.       (line   6)
* install-info:                          Invoking install-info.
                                                              (line   6)
* Installing an Info file:               Install an Info File.
                                                              (line   6)
* Installing Info in another directory:  Other Info Directories.
                                                              (line   6)
* Introduction, as part of file:         Software Copying Permissions.
                                                              (line  16)
* Invoking macros:                       Invoking Macros.     (line   6)
* Itemization:                           itemize.             (line   6)
* j:                                     Inserting Accents.   (line  33)
* keyboard input:                        kbd.                 (line   6)
* Keys, recommended names:               key.                 (line  19)
* Knuth, Donald:                         Printed Books.       (line   6)
* Larger or smaller pages:               Cropmarks and Magnification.
                                                              (line  24)
* Less cluttered menu entry:             Less Cluttered Menu Entry.
                                                              (line   6)
* License agreement:                     Software Copying Permissions.
                                                              (line   6)
* Line breaks:                           Line Breaks.         (line   6)
* Line breaks, preventing:               w.                   (line   6)
* Line length, column widths as fraction of: Multitable Column Widths.
                                                              (line  11)
* Line spacing:                          sp.                  (line   6)
* Lisp example:                          Lisp Example.        (line   6)
* Lisp example for a small book:         smallexample & smalllisp.
                                                              (line   6)
* List of  @-commands:                   Command List.        (line   6)
* Listing a new info file:               New Info File.       (line   6)
* Lists and tables, making:              Lists and Tables.    (line   6)
* Local variables:                       Compile-Command.     (line   6)
* Location of menus:                     Menu Location.       (line   6)
* Looking for badly referenced nodes:    Running Info-Validate.
                                                              (line   6)
* lpr (DVI print command):               Print with lpr.      (line   6)
* Macro definitions <1>:                 Defining Macros.     (line   6)
* Macro definitions:                     Sample Function Definition.
                                                              (line   6)
* Macro invocation:                      Invoking Macros.     (line   6)
* Macron accent:                         Inserting Accents.   (line  13)
* Macros:                                Macros.              (line   6)
* Macros, undefining:                    Defining Macros.     (line  26)
* Magnified printing:                    Cropmarks and Magnification.
                                                              (line  24)
* mailto link:                           email.               (line  10)
* makeinfo inside Emacs:                 makeinfo in Emacs.   (line   6)
* makeinfo options:                      makeinfo options.    (line   6)
* Making a printed manual:               Format/Print Hardcopy.
                                                              (line   6)
* Making a tag table automatically:      Tag and Split Files. (line   6)
* Making a tag table manually:           Unsplit.             (line  26)
* Making cross references:               Cross References.    (line   6)
* Making line and page breaks:           Breaks.              (line   6)
* Making lists and tables:               Lists and Tables.    (line   6)
* Manual characteristics, printed:       Printed Books.       (line   6)
* Marking text within a paragraph:       Marking Text.        (line   6)
* Marking words and phrases:             Marking Text.        (line   6)
* Master menu:                           The Top Node.        (line   6)
* Master menu parts:                     Master Menu Parts.   (line   6)
* Mathematical expressions <1>:          Raw Formatter Commands.
                                                              (line  25)
* Mathematical expressions:              math.                (line   6)
* Menu description, start:               Inserting.           (line  94)
* Menu entries with two colons:          Less Cluttered Menu Entry.
                                                              (line   6)
* Menu example:                          Menu Example.        (line   6)
* Menu location:                         Menu Location.       (line   6)
* Menu parts:                            Menu Parts.          (line   6)
* Menu writing:                          Writing a Menu.      (line   6)
* Menus:                                 Menus.               (line   6)
* Menus generated with indices:          Printing Indices & Menus.
                                                              (line   6)
* META key:                              key.                 (line  53)
* Meta-syntactic chars for arguments:    Optional Arguments.  (line   6)
* Millimeters:                           Images.              (line  42)
* Minimal requirements for formatting:   Requirements Summary.
                                                              (line   6)
* Minimal Texinfo file (requirements):   Minimum.             (line   6)
* Mistakes, catching:                    Catching Mistakes.   (line   6)
* Mode, using Texinfo:                   Texinfo Mode.        (line   6)
* Multiple spaces:                       Multiple Spaces.     (line   6)
* Multitable column widths:              Multitable Column Widths.
                                                              (line   6)
* Multitable rows:                       Multitable Rows.     (line   6)
* Must have in Texinfo file:             Minimum.             (line   6)
* Mutually recursive macros:             Defining Macros.     (line  19)
* Names for indices:                     syncodeindex.        (line  17)
* Names of index files:                  Format with tex/texindex.
                                                              (line  24)
* Names recommended for keys:            key.                 (line  19)
* Naming a `Top' Node in references:     Top Node Naming.     (line   6)
* Need space at page bottom:             need.                (line   6)
* New index defining:                    New Indices.         (line   6)
* New info file, listing it in dir file: New Info File.       (line   6)
* New Texinfo commands, defining:        Macros.              (line   6)
* Node line requirements:                Node Line Requirements.
                                                              (line   6)
* Node line writing:                     Writing a Node.      (line   6)
* Node, `Top':                           The Top Node.        (line   6)
* Node, defined:                         node.                (line   6)
* Nodename must be unique:               Node Line Requirements.
                                                              (line   8)
* Nodename, cannot contain:              Node Line Requirements.
                                                              (line  23)
* Nodes for menus are short:             Menu Location.       (line   6)
* Nodes in other Info files:             Other Info Files.    (line   6)
* Nodes, catching mistakes:              Catching Mistakes.   (line   6)
* Nodes, checking for badly referenced:  Running Info-Validate.
                                                              (line   6)
* Not ending a sentence:                 Not Ending a Sentence.
                                                              (line   6)
* Obtaining TeX:                         Obtaining TeX.       (line   6)
* Occurrences, listing with @occur:      Using occur.         (line   6)
* OE:                                    Inserting Accents.   (line  33)
* oe:                                    Inserting Accents.   (line  33)
* Optional and repeated arguments:       Optional Arguments.  (line   6)
* Options for makeinfo:                  makeinfo options.    (line   6)
* Ordinary HTML commands, using:         Raw Formatter Commands.
                                                              (line   6)
* Ordinary TeX commands, using:          Raw Formatter Commands.
                                                              (line   6)
* Other Info files' nodes:               Other Info Files.    (line   6)
* Outline of file structure, showing it: Showing the Structure.
                                                              (line   6)
* Overfull hboxes:                       Overfull hboxes.     (line   6)
* Overview of Texinfo:                   Overview.            (line   6)
* Page breaks:                           page.                (line   6)
* Page delimiter in Texinfo mode:        Showing the Structure.
                                                              (line  43)
* Page headings:                         Headings.            (line   6)
* Page numbering:                        Headings.            (line   6)
* Page sizes for books:                  smallbook.           (line   6)
* page-delimiter:                        Showing the Structure.
                                                              (line  43)
* Pages, starting odd:                   setchapternewpage.   (line   6)
* Paper size, European A4:               A4 Paper.            (line   6)
* Paragraph indentation:                 paragraphindent.     (line   6)
* Paragraph, marking text within:        Marking Text.        (line   6)
* Parsing errors:                        makeinfo in Emacs.   (line  27)
* Part of file formatting and printing:  Printing.            (line   6)
* Parts of a cross reference:            Cross Reference Parts.
                                                              (line   6)
* Parts of a master menu:                Master Menu Parts.   (line   6)
* Parts of a menu:                       Menu Parts.          (line   6)
* Periods, inserting:                    Not Ending a Sentence.
                                                              (line   6)
* Permissions:                           Sample Permissions.  (line   6)
* Permissions, printed:                  Copyright & Permissions.
                                                              (line   6)
* Picas:                                 Images.              (line  30)
* Pictures, inserting:                   Images.              (line   6)
* Pinard, Franc,ois:                     Acknowledgements.    (line  11)
* plain TeX:                             Raw Formatter Commands.
                                                              (line   6)
* Point, indicating it in a buffer:      Point Glyph.         (line   6)
* Pointer creation with makeinfo:        makeinfo Pointer Creation.
                                                              (line   6)
* Pointer validation with makeinfo:      Pointer Validation.  (line   6)
* Points (dimension):                    Images.              (line  27)
* Predefined indexing commands:          Indexing Commands.   (line  53)
* Predefined names for indices:          syncodeindex.        (line  17)
* Preparing to use TeX:                  Preparing for TeX.   (line   6)
* Preventing line and page breaks:       Breaks.              (line   6)
* Previous node of Top node:             First Node.          (line  25)
* Print and format in Texinfo mode:      Texinfo Mode Printing.
                                                              (line   6)
* Print, format from Emacs shell:        Within Emacs.        (line   6)
* Printed book and manual characteristics: Printed Books.     (line   6)
* Printed output, indicating it:         Print Glyph.         (line   6)
* Printed permissions:                   Copyright & Permissions.
                                                              (line   6)
* Printing a region or buffer:           Printing.            (line   6)
* Printing an index:                     Printing Indices & Menus.
                                                              (line   6)
* Printing cropmarks:                    Cropmarks and Magnification.
                                                              (line   6)
* Problems, catching:                    Catching Mistakes.   (line   6)
* Prototype row, column widths defined by: Multitable Column Widths.
                                                              (line  21)
* Quotations:                            quotation.           (line   6)
* Raising and lowering sections:         Raise/lower sections.
                                                              (line   6)
* Raw formatter commands:                Raw Formatter Commands.
                                                              (line   6)
* Recommended names for keys:            key.                 (line  19)
* Rectangle, ugly, black in hardcopy:    Overfull hboxes.     (line  28)
* Recursion, mutual:                     Defining Macros.     (line  19)
* References:                            Cross References.    (line   6)
* References using @inforef:             inforef.             (line   6)
* References using @pxref:               pxref.               (line   6)
* References using @ref:                 ref.                 (line   6)
* References using @xref:                xref.                (line   6)
* Referring to other Info files:         Other Info Files.    (line   6)
* Refilling paragraphs:                  Refilling Paragraphs.
                                                              (line   6)
* Region formatting and printing:        Printing.            (line   6)
* Region printing in Texinfo mode:       Texinfo Mode Printing.
                                                              (line   6)
* Repeated and optional arguments:       Optional Arguments.  (line   6)
* Required in Texinfo file:              Minimum.             (line   6)
* Requirements for formatting:           Requirements Summary.
                                                              (line   6)
* Requirements for include files:        Include File Requirements.
                                                              (line   6)
* Requirements for updating commands:    Updating Requirements.
                                                              (line   6)
* Result of an expression:               result.              (line   6)
* ridt.eps:                              Images.              (line  53)
* Ring accent:                           Inserting Accents.   (line  13)
* Rows, of a multitable:                 Multitable Rows.     (line   6)
* Running an Info formatter:             Info Formatting.     (line   6)
* Running Info-validate:                 Using Info-validate. (line   6)
* Running makeinfo in Emacs:             makeinfo in Emacs.   (line   6)
* Sample @include file:                  Sample Include File. (line   6)
* Sample function definition:            Sample Function Definition.
                                                              (line   6)
* Sample Texinfo file:                   Short Sample.        (line   6)
* Sample Texinfo file, no comments:      Sample Texinfo File. (line   6)
* Scaled points:                         Images.              (line  51)
* Section structure of a file, showing it: Showing the Structure.
                                                              (line   6)
* Sections, raising and lowering:        Raise/lower sections.
                                                              (line   6)
* Sentence ending punctuation:           Ending a Sentence.   (line   6)
* Sentence non-ending punctuation:       Not Ending a Sentence.
                                                              (line   6)
* Separate footnote style:               Footnote Styles.     (line  20)
* Sharp S:                               Inserting Accents.   (line  33)
* Shell formatting with tex and texindex: Format with tex/texindex.
                                                              (line   6)
* Shell, format, print from:             Within Emacs.        (line   6)
* Shell, running makeinfo in:            makeinfo in Emacs.   (line   6)
* Short nodes for menus:                 Menu Location.       (line   6)
* Showing the section structure of a file: Showing the Structure.
                                                              (line   6)
* Showing the structure of a file:       Using texinfo-show-structure.
                                                              (line   6)
* Site-wide Texinfo configuration file:  Preparing for TeX.   (line  24)
* Size of printed book:                  smallbook.           (line   6)
* slanted typewriter font, for @kbd:     kbd.                 (line  15)
* Small book example:                    smallexample & smalllisp.
                                                              (line   6)
* Small book size:                       smallbook.           (line   6)
* Small caps font:                       Smallcaps.           (line   6)
* Software copying permissions:          Software Copying Permissions.
                                                              (line   6)
* Sorting indices:                       Format/Print Hardcopy.
                                                              (line   6)
* Spaces (blank lines):                  sp.                  (line   6)
* Spacing, inserting:                    Inserting Space.     (line   6)
* Special characters, commands to insert: Braces Atsigns.     (line   6)
* Special insertions:                    Insertions.          (line   6)
* Special typesetting commands:          Dots Bullets.        (line   6)
* Specifying index entries:              Indexing Commands.   (line   6)
* Splitting an Info file manually:       Splitting.           (line   6)
* ss:                                    Inserting Accents.   (line  33)
* Stallman, Richard M.:                  Acknowledgements.    (line   6)
* Start of header line:                  Start of Header.     (line   6)
* Starting chapters:                     setchapternewpage.   (line   6)
* Structure of a file, showing it:       Showing the Structure.
                                                              (line   6)
* Structure, catching mistakes in:       Catching Mistakes.   (line   6)
* Structuring of chapters:               Structuring.         (line   6)
* Subsection-like commands:              unnumberedsubsec appendixsubsec subheading.
                                                              (line   6)
* Subsub commands:                       subsubsection.       (line   6)
* Syntactic conventions:                 Conventions.         (line   6)
* Syntax, optional & repeated arguments: Optional Arguments.  (line   6)
* tab:                                   Multitable Rows.     (line   6)
* Table of contents:                     Contents.            (line   6)
* Tables and lists, making:              Lists and Tables.    (line   6)
* Tables with indexes:                   ftable vtable.       (line   6)
* Tables, making multi-column:           Multi-column Tables. (line   6)
* Tables, making two-column:             Two-column Tables.   (line   6)
* Tabs; don't use!:                      Conventions.         (line  38)
* Tag table, making automatically:       Tag and Split Files. (line   6)
* Tag table, making manually:            Unsplit.             (line  26)
* Template for a definition:             Def Cmd Template.    (line   6)
* TeX commands, using ordinary:          Raw Formatter Commands.
                                                              (line   6)
* TeX index sorting:                     Format/Print Hardcopy.
                                                              (line   6)
* TeX input initialization:              Preparing for TeX.   (line   6)
* TeX, how to obtain:                    Obtaining TeX.       (line   6)
* texi2dvi:                              Format with tex/texindex.
                                                              (line  74)
* texi2dvi (shell script):               Format with texi2dvi.
                                                              (line   6)
* texindex <1>:                          Format with tex/texindex.
                                                              (line  16)
* texindex:                              Format/Print Hardcopy.
                                                              (line   6)
* Texinfo commands, defining new:        Macros.              (line   6)
* Texinfo file beginning:                Beginning a File.    (line   6)
* Texinfo file ending:                   Ending a File.       (line   6)
* Texinfo file header:                   Header.              (line   6)
* Texinfo file minimum:                  Minimum.             (line   6)
* Texinfo file section structure, showing it: Showing the Structure.
                                                              (line   6)
* Texinfo mode:                          Texinfo Mode.        (line   6)
* Texinfo overview:                      Overview.            (line   6)
* Texinfo printed book characteristics:  Printed Books.       (line   6)
* texinfo.cnf <1>:                       A4 Paper.            (line  29)
* texinfo.cnf:                           setfilename.         (line  36)
* texinfo.cnf installation:              Preparing for TeX.   (line  24)
* texinfo.tex, installing:               Preparing for TeX.   (line  11)
* TEXINPUTS:                             Preparing for TeX.   (line   6)
* TEXINPUTS environment variable:        Preparing for TeX.   (line   6)
* Text, conditionally visible:           Conditionals.        (line   6)
* Thin space between number, dimension:  dmn.                 (line   6)
* Tie-after accent:                      Inserting Accents.   (line  13)
* Tilde accent:                          Inserting Accents.   (line  13)
* Tips:                                  Tips.                (line   8)
* Title page:                            titlepage.           (line   6)
* Titlepage end starts headings:         end titlepage.       (line   6)
* Titlepage permissions:                 Titlepage Permissions.
                                                              (line   6)
* Top node:                              The Top Node.        (line   6)
* Top node is first:                     First Node.          (line   6)
* Top node naming for references:        Top Node Naming.     (line   6)
* Top node summary:                      Top Node Summary.    (line   6)
* Tree structuring:                      Tree Structuring.    (line   6)
* Two `First' Lines for @deffn:          deffnx.              (line   6)
* Two letter names for indices:          syncodeindex.        (line  17)
* Two named items for @table:            itemx.               (line   6)
* Two part menu entry:                   Less Cluttered Menu Entry.
                                                              (line   6)
* Typesetting commands for dots, etc.:   Dots Bullets.        (line   6)
* Umlaut accent:                         Inserting Accents.   (line  13)
* Uncluttered menu entry:                Less Cluttered Menu Entry.
                                                              (line   6)
* Undefining macros:                     Defining Macros.     (line  26)
* Underbar accent:                       Inserting Accents.   (line  13)
* Underdot accent:                       Inserting Accents.   (line  13)
* Uniform resource locator, indicating:  url.                 (line   6)
* Uniform resource locator, referring to: uref.               (line   6)
* Unique nodename requirement:           Node Line Requirements.
                                                              (line   8)
* Unprocessed text:                      Comments.            (line  26)
* Unsplit file creation:                 Unsplit.             (line   6)
* Up node of Top node:                   First Node.          (line  11)
* Updating nodes and menus:              Updating Nodes and Menus.
                                                              (line   6)
* Updating requirements:                 Updating Requirements.
                                                              (line   6)
* URL, indicating:                       url.                 (line   6)
* URL, referring to:                     uref.                (line   6)
* Usage tips:                            Tips.                (line   8)
* user input:                            kbd.                 (line  15)
* User options, marking:                 Variables Commands.  (line  57)
* User-defined Texinfo commands:         Macros.              (line   6)
* Validating a large file:               Using Info-validate. (line   6)
* Validation of pointers:                Pointer Validation.  (line   6)
* Value of an expression, indicating:    result.              (line   6)
* version number, finding:               Invoking install-info.
                                                              (line  68)
* Vertical whitespace (vskip):           Copyright & Permissions.
                                                              (line  16)
* Vertically holding text together:      group.               (line   6)
* Visibility of conditional text:        Conditionals.        (line   6)
* Weisshaus, Melissa:                    Acknowledgements.    (line  11)
* Whitespace, inserting <1>:             Multiple Spaces.     (line   6)
* Whitespace, inserting:                 Inserting Space.     (line   6)
* Width of images:                       Images.              (line  16)
* Widths, defining multitable column:    Multitable Column Widths.
                                                              (line   6)
* Wildcards:                             Format with tex/texindex.
                                                              (line  32)
* Words and phrases, marking them:       Marking Text.        (line   6)
* Writing a menu:                        Writing a Menu.      (line   6)
* Writing an @node line:                 Writing a Node.      (line   6)
* Writing index entries:                 Indexing Commands.   (line  26)
* Zuhn, David D.:                        Acknowledgements.    (line  11)


